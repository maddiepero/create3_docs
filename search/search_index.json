{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"iRobot\u00ae Create\u00ae 3 Educational Robot What is iRobot\u00ae Create\u00ae 3? iRobot\u00ae Create\u00ae 3 is an affordable, mobile robotics platform for educators, students, and developers. The robot has a full suite of on-board sensors and actuators which will allow you to develop and test your robotics algorithms. The software is entirely based on ROS 2: all sensors data are produced through ROS 2 publications while ROS 2 servers and subscriptions are used to control actuators and respond to users requests. The robot also provides some autonomous behaviors out of the box, such as docking, wall-follow and reactions to obstacles. All these can be triggered and/or configured through ROS 2 actions and parameters. Designed for beginner to advanced ROS 2 users, Create\u00ae 3 allows for a variety of programming methods. With Wi-fi and Bluetooth capability, Ethernet over USB connections, plus a removable faceplate for attaching payloads, you can start building with your Create\u00ae 3 right away. More detailed documentation can be accessed using the left navigation bar, or if it is collapsed, the \u2630 menu in the top left corner of this page. Key internal docs links Hardware ROS 2 API Software Releases Useful external links Here you can find additional content on the iRobot\u00ae Create\u00ae 3: Create\u00ae 3 Discussion Forum Create\u00ae ROS 2 Messages Definitions Create\u00ae 3 Gazebo Simulator Create\u00ae 3 Examples","title":"Home"},{"location":"#irobot-create-3-educational-robot","text":"","title":"iRobot\u00ae Create\u00ae 3 Educational Robot"},{"location":"#what-is-irobot-create-3","text":"iRobot\u00ae Create\u00ae 3 is an affordable, mobile robotics platform for educators, students, and developers. The robot has a full suite of on-board sensors and actuators which will allow you to develop and test your robotics algorithms. The software is entirely based on ROS 2: all sensors data are produced through ROS 2 publications while ROS 2 servers and subscriptions are used to control actuators and respond to users requests. The robot also provides some autonomous behaviors out of the box, such as docking, wall-follow and reactions to obstacles. All these can be triggered and/or configured through ROS 2 actions and parameters. Designed for beginner to advanced ROS 2 users, Create\u00ae 3 allows for a variety of programming methods. With Wi-fi and Bluetooth capability, Ethernet over USB connections, plus a removable faceplate for attaching payloads, you can start building with your Create\u00ae 3 right away. More detailed documentation can be accessed using the left navigation bar, or if it is collapsed, the \u2630 menu in the top left corner of this page.","title":"What is iRobot\u00ae Create\u00ae 3?"},{"location":"#key-internal-docs-links","text":"Hardware ROS 2 API Software Releases","title":"Key internal docs links"},{"location":"#useful-external-links","text":"Here you can find additional content on the iRobot\u00ae Create\u00ae 3: Create\u00ae 3 Discussion Forum Create\u00ae ROS 2 Messages Definitions Create\u00ae 3 Gazebo Simulator Create\u00ae 3 Examples","title":"Useful external links"},{"location":"api/docking/","text":"Create\u00ae 3 Docking The Create\u00ae 3 robot is equipped with a docking station to recharge it between experiments. Through the ROS 2 APIs users can command docking and undocking autonomous behaviors. Note that, in order for the robot to detect the dock, determine its location and understand when it is succesfully docked, it is necessary that the docking station is connected to a power source. Built-in docking behaviors Undocking You can command the robot to undock using the following ROS 2 action. ros2 action send_goal /undock irobot_create_msgs/action/Undock \"{}\" The robot will move backward out of the dock and then it will rotate 180 degrees. This action will fail if the robot is already undocked. Docking You can command the robot to dock using the following ROS 2 action. ros2 action send_goal /dock irobot_create_msgs/action/DockServo \"{}\" The robot will first search for the dock in its immediate surroundings. Note that the action will fail if the robot is too far from the dock. You can check if the dock is visible by subscribing to the /dock ROS 2 topic. Then the robot will align with the dock and carefully drive onto it. This action will fail if the robot is already docked. Docking sensor data The Create\u00ae 3 robot exposes several docking-related information through its ROS 2 publications. These should allow users to write their own algorithms taking into account the presence of the dock in the environment and even to write their own docking and undocking procedures. IR opcodes The Create\u00ae 3 docking station transmit several IR signals. The Create\u00ae 3 robot is equipped with two different sensors that are capable of detecting them. The robot will publish these signals in the /ir_opcode ROS 2 topic. Each message will contain a time-stamped detection of one of those signals, including the identifier of the sensor that detected it. Dock information More high-level information is produced by the robot in the /dock ROS 2 topic. Here it's possible to quickly know if the robot is able to see the dock from its current location and whether it is currently docked or not.","title":"Docking"},{"location":"api/docking/#create-3-docking","text":"The Create\u00ae 3 robot is equipped with a docking station to recharge it between experiments. Through the ROS 2 APIs users can command docking and undocking autonomous behaviors. Note that, in order for the robot to detect the dock, determine its location and understand when it is succesfully docked, it is necessary that the docking station is connected to a power source.","title":"Create\u00ae 3 Docking"},{"location":"api/docking/#built-in-docking-behaviors","text":"","title":"Built-in docking behaviors"},{"location":"api/docking/#undocking","text":"You can command the robot to undock using the following ROS 2 action. ros2 action send_goal /undock irobot_create_msgs/action/Undock \"{}\" The robot will move backward out of the dock and then it will rotate 180 degrees. This action will fail if the robot is already undocked.","title":"Undocking"},{"location":"api/docking/#docking","text":"You can command the robot to dock using the following ROS 2 action. ros2 action send_goal /dock irobot_create_msgs/action/DockServo \"{}\" The robot will first search for the dock in its immediate surroundings. Note that the action will fail if the robot is too far from the dock. You can check if the dock is visible by subscribing to the /dock ROS 2 topic. Then the robot will align with the dock and carefully drive onto it. This action will fail if the robot is already docked.","title":"Docking"},{"location":"api/docking/#docking-sensor-data","text":"The Create\u00ae 3 robot exposes several docking-related information through its ROS 2 publications. These should allow users to write their own algorithms taking into account the presence of the dock in the environment and even to write their own docking and undocking procedures.","title":"Docking sensor data"},{"location":"api/docking/#ir-opcodes","text":"The Create\u00ae 3 docking station transmit several IR signals. The Create\u00ae 3 robot is equipped with two different sensors that are capable of detecting them. The robot will publish these signals in the /ir_opcode ROS 2 topic. Each message will contain a time-stamped detection of one of those signals, including the identifier of the sensor that detected it.","title":"IR opcodes"},{"location":"api/docking/#dock-information","text":"More high-level information is produced by the robot in the /dock ROS 2 topic. Here it's possible to quickly know if the robot is able to see the dock from its current location and whether it is currently docked or not.","title":"Dock information"},{"location":"api/drive-goals/","text":"Create\u00ae 3 Drive Goals The Create\u00ae 3 robot exposes some actions for simple driving goals that close the loop on odometry position. Through the ROS 2 APIs users can command: Driving along a specified arc Driving in a straight line for a fixed distance Navigating to a specified odometry position and orientation Rotating a fixed angle A cliff event or a wheel stall will trigger a goal to cancel, otherwise it will run until the robot achieves the odometry goal or it's canceled by the user. If there is something blocking the robot's path, the user must intervene to stop the robot, otherwise it will continue to bump until odometry slip achieves the goal position. Built-in Drive Goals behaviors Drive Arc You can command the robot to drive a fixed angle along an arc defined by radius: ros2 action send_goal /drive_arc irobot_create_msgs/action/DriveArc \"{angle: 1.57,radius: 0.3,translate_direction: 1,max_translation_speed: 0.3}\" The robot will drive forward or backward given the translate direction along an arc defined by radius until it achieves the specified relative heading. Drive Distance You can command the robot to drive a fixed distance in a straight line: ros2 action send_goal /drive_distance irobot_create_msgs/action/DriveDistance \"{distance: 0.5,max_translation_speed: 0.15}\" The robot will drive straight until it has traveled the specified distance in odometry frame. It will drive backwards if distance is negative (be aware of the backup limit ). Navigate To Position You can command the robot to drive to the specified odometry position: ros2 action send_goal /navigate_to_position irobot_create_msgs/action/NavigateToPosition \"{achieve_goal_heading: true,goal_pose:{pose:{position:{x: 1,y: 0.2,z: 0.0}, orientation:{x: 0.0,y: 0.0, z: 0.0, w: 1.0}}}}\" The robot will take a rotate -> translate -> rotate approach to achieve the goal position. First rotating from its current heading to face the goal position, then driving straight to the goal position, then optionally rotating to achieve the goal heading. Rotate Angle You can command the robot to rotate a relative angle from current robot heading: ros2 action send_goal /rotate_angle irobot_create_msgs/action/RotateAngle \"{angle: 1.57,max_rotation_speed: 0.5}\" The robot will rotate either clockwise (negative angle) or counter clockwise (positive angle) until it has achieved the angle offset.","title":"Drive Goals"},{"location":"api/drive-goals/#create-3-drive-goals","text":"The Create\u00ae 3 robot exposes some actions for simple driving goals that close the loop on odometry position. Through the ROS 2 APIs users can command: Driving along a specified arc Driving in a straight line for a fixed distance Navigating to a specified odometry position and orientation Rotating a fixed angle A cliff event or a wheel stall will trigger a goal to cancel, otherwise it will run until the robot achieves the odometry goal or it's canceled by the user. If there is something blocking the robot's path, the user must intervene to stop the robot, otherwise it will continue to bump until odometry slip achieves the goal position.","title":"Create\u00ae 3 Drive Goals"},{"location":"api/drive-goals/#built-in-drive-goals-behaviors","text":"","title":"Built-in Drive Goals behaviors"},{"location":"api/drive-goals/#drive-arc","text":"You can command the robot to drive a fixed angle along an arc defined by radius: ros2 action send_goal /drive_arc irobot_create_msgs/action/DriveArc \"{angle: 1.57,radius: 0.3,translate_direction: 1,max_translation_speed: 0.3}\" The robot will drive forward or backward given the translate direction along an arc defined by radius until it achieves the specified relative heading.","title":"Drive Arc"},{"location":"api/drive-goals/#drive-distance","text":"You can command the robot to drive a fixed distance in a straight line: ros2 action send_goal /drive_distance irobot_create_msgs/action/DriveDistance \"{distance: 0.5,max_translation_speed: 0.15}\" The robot will drive straight until it has traveled the specified distance in odometry frame. It will drive backwards if distance is negative (be aware of the backup limit ).","title":"Drive Distance"},{"location":"api/drive-goals/#navigate-to-position","text":"You can command the robot to drive to the specified odometry position: ros2 action send_goal /navigate_to_position irobot_create_msgs/action/NavigateToPosition \"{achieve_goal_heading: true,goal_pose:{pose:{position:{x: 1,y: 0.2,z: 0.0}, orientation:{x: 0.0,y: 0.0, z: 0.0, w: 1.0}}}}\" The robot will take a rotate -> translate -> rotate approach to achieve the goal position. First rotating from its current heading to face the goal position, then driving straight to the goal position, then optionally rotating to achieve the goal heading.","title":"Navigate To Position"},{"location":"api/drive-goals/#rotate-angle","text":"You can command the robot to rotate a relative angle from current robot heading: ros2 action send_goal /rotate_angle irobot_create_msgs/action/RotateAngle \"{angle: 1.57,max_rotation_speed: 0.5}\" The robot will rotate either clockwise (negative angle) or counter clockwise (positive angle) until it has achieved the angle offset.","title":"Rotate Angle"},{"location":"api/hazards/","text":"Hazards Detection The Create\u00ae 3 robot is equipped with a variety of sensors that are capable to detect hazards in the environment. In particular you will find: Bumper sensor to detect front contacts. Cliff sensors to detect holes and steps. Wheel drop sensors to detect if a wheel is not touching the ground. The hazard_detection topic The Create\u00ae 3 robot will periodically publish on the hazard_detection ROS 2 topic a vector of all the currently detected hazards. If the vector is empty, this means that no hazards are currently being detected. Each element of the vector will denote a different hazard detection. Look at the HazardDetection.msg definition in order to see how to differentiate different types of hazards. The header field of each indivdual detection will provide all the information required to localize it. In particular the timestamp will denote when the robot detected the hazard and the frame id will denote the location of the sensor that performed the detection. Important The hazard_detection topic will also contain a BACKUP_LIMIT hazard if the robot safety features are preventing it from safely moving further backwards. Look at the safety documentation for details and how to disable it. The kidnap_status topic By \"kidnap\" we denote the action of manually lifting the robot and, eventually, placing it back in a location which may be different from the original one. The Create\u00ae 3 robot combines together different sensors data in order to determine when it's being kidnapped. A boolean status will be periodically published on the kidnap_status topic. The ir_intensity topic Besides the aforementioned sensors, the Create\u00ae 3 robot is also equipped with IR emitters and receivers and it can use them to detect objects at close range. The Create\u00ae 3 robot will periodically publish on the ir_intensity topic the raw intensity readings obtained from these sensors. The message will be a vector where each element corresponds to a different sensor. The higher the intensity value is, the closer an obstacle is to the robot. The header field of each indivdual detection will provide all the information required to localize it. In particular the timestamp will denote when the robot detected the hazard and the frame id will denote the location of the sensor that performed the detection.","title":"Hazards"},{"location":"api/hazards/#hazards-detection","text":"The Create\u00ae 3 robot is equipped with a variety of sensors that are capable to detect hazards in the environment. In particular you will find: Bumper sensor to detect front contacts. Cliff sensors to detect holes and steps. Wheel drop sensors to detect if a wheel is not touching the ground.","title":"Hazards Detection"},{"location":"api/hazards/#the-hazard_detection-topic","text":"The Create\u00ae 3 robot will periodically publish on the hazard_detection ROS 2 topic a vector of all the currently detected hazards. If the vector is empty, this means that no hazards are currently being detected. Each element of the vector will denote a different hazard detection. Look at the HazardDetection.msg definition in order to see how to differentiate different types of hazards. The header field of each indivdual detection will provide all the information required to localize it. In particular the timestamp will denote when the robot detected the hazard and the frame id will denote the location of the sensor that performed the detection. Important The hazard_detection topic will also contain a BACKUP_LIMIT hazard if the robot safety features are preventing it from safely moving further backwards. Look at the safety documentation for details and how to disable it.","title":"The hazard_detection topic"},{"location":"api/hazards/#the-kidnap_status-topic","text":"By \"kidnap\" we denote the action of manually lifting the robot and, eventually, placing it back in a location which may be different from the original one. The Create\u00ae 3 robot combines together different sensors data in order to determine when it's being kidnapped. A boolean status will be periodically published on the kidnap_status topic.","title":"The kidnap_status topic"},{"location":"api/hazards/#the-ir_intensity-topic","text":"Besides the aforementioned sensors, the Create\u00ae 3 robot is also equipped with IR emitters and receivers and it can use them to detect objects at close range. The Create\u00ae 3 robot will periodically publish on the ir_intensity topic the raw intensity readings obtained from these sensors. The message will be a vector where each element corresponds to a different sensor. The higher the intensity value is, the closer an obstacle is to the robot. The header field of each indivdual detection will provide all the information required to localize it. In particular the timestamp will denote when the robot detected the hazard and the frame id will denote the location of the sensor that performed the detection.","title":"The ir_intensity topic"},{"location":"api/odometry/","text":"Odometry Estimation The Create\u00ae 3 robot is equipped with a variety of sensors that are used to detect its motions. In particular you will find: IMU Optical mouse Wheel encoders Raw sensor topics If you want to implement your own algorithms using the raw sensor readings, you can read them from the following topics: /imu /mouse /wheel_status /wheel_ticks /wheel_vels The odom topic The Create\u00ae 3 robot fuses the reading from its various sensors in order to produce a dead reckoning estimate of its pose on the odom topic. The slip_status topic We denote by \"slippage\" a loss of efficiency in the wheels. This is usually caused by losing traction between the wheels and the ground with the results that the motion detected by the wheels encoders is greater than what the robot actually performed. We fuse together various sensors in order to compute a boolean estimate of whether the robot is slipping or not and we periodically publish it on the slip_status topic. If you are developing your own state estimation algorithm using the wheels encoders, then it is recommended to inflate the differential motion covariance matrix to take this problem into account. Note that the optical mouse sensor is not affected by slippage. The stop_status topic The Create\u00ae 3 robot will periodically publish a boolean estimate of whether it is currently moving or not on the stop_status topic.","title":"Odometry"},{"location":"api/odometry/#odometry-estimation","text":"The Create\u00ae 3 robot is equipped with a variety of sensors that are used to detect its motions. In particular you will find: IMU Optical mouse Wheel encoders","title":"Odometry Estimation"},{"location":"api/odometry/#raw-sensor-topics","text":"If you want to implement your own algorithms using the raw sensor readings, you can read them from the following topics: /imu /mouse /wheel_status /wheel_ticks /wheel_vels","title":"Raw sensor topics"},{"location":"api/odometry/#the-odom-topic","text":"The Create\u00ae 3 robot fuses the reading from its various sensors in order to produce a dead reckoning estimate of its pose on the odom topic.","title":"The odom topic"},{"location":"api/odometry/#the-slip_status-topic","text":"We denote by \"slippage\" a loss of efficiency in the wheels. This is usually caused by losing traction between the wheels and the ground with the results that the motion detected by the wheels encoders is greater than what the robot actually performed. We fuse together various sensors in order to compute a boolean estimate of whether the robot is slipping or not and we periodically publish it on the slip_status topic. If you are developing your own state estimation algorithm using the wheels encoders, then it is recommended to inflate the differential motion covariance matrix to take this problem into account. Note that the optical mouse sensor is not affected by slippage.","title":"The slip_status topic"},{"location":"api/odometry/#the-stop_status-topic","text":"The Create\u00ae 3 robot will periodically publish a boolean estimate of whether it is currently moving or not on the stop_status topic.","title":"The stop_status topic"},{"location":"api/reflexes/","text":"Reflexes With the word \"reflex\" we denote a set of autonomous reactive behaviors that the Create\u00ae 3 robot will trigger when it detects obstacles or hazards. Reflexes are high-priority behaviors and will temporarily override any user-provided command for their short duration. Reflexes can be enabled or disabled on the Create\u00ae 3 using the corresponding ROS 2 parameters exposed by the motion_control ROS 2 node. Reflex parameters The reflexes_enabled parameter controls whether reflexes should be executed or not. It accepts boolean values. When this parameter is set to false , no reflexes will be enabled, regardless of their specific parameters values. Reflexes are enabled by default. Bumps reflex The reflex.REFLEX_BUMP ROS 2 parameter enables ( true ) or disables ( false ) the bump reflex. It will trigger as soon as the robot bumps into an obstacle and it will move the robot away from it. The reflex will continue until the robot has cleared the bump. This reflex is enabled by default. Cliffs reflex The reflex.REFLEX_CLIFF ROS 2 parameter enables ( true ) or disables ( false ) the cliff reflex. It will trigger as soon as the robot detects a cliff and it will move the robot away from it. The reflex will continue until the robot has cleared the cliff. This reflex is enabled by default. Dock avoidance reflex The reflex.REFLEX_DOCK_AVOID ROS 2 parameter enables ( true ) or disables ( false ) the dock avoidance reflex. It will trigger as soon as the robot gets close to the dock and tries to move towards it. The reflex will stop forward movements. This reflex is disabled by default. Gyro calibration reflex The reflex.REFLEX_GYRO_CAL ROS 2 parameter enables ( true ) or disables ( false ) the gyro calibration reflex. It will trigger while the robot is stationary and will try to recalibrate the internal gyroscope. This reflex is enabled by default. Panic reflex The reflex.REFLEX_PANIC ROS 2 parameter enables ( true ) or disables ( false ) the dock avoidance reflex. It will trigger when the robot is trapped and unable to clear obstacles or hazards. The reflex will try more aggressive maneuvers to allow the robot to recover from this situation This reflex is enabled by default. Proximity slowdown reflex The reflex.REFLEX_PROXIMITY_SLOWDOWN ROS 2 parameter enables ( true ) or disables ( false ) the dock avoidance reflex. It will trigger when the robot's IR sensors detect an obstacle in close proximity. The reflex will reduce the robot movement speed in order to better prepare for an eventual impact. This reflex is enabled by default. Stuck reflex The reflex.REFLEX_STUCK ROS 2 parameter enables ( true ) or disables ( false ) the dock avoidance reflex. It will trigger when the robot is stuck, i.e. it's pushing against an obstacle and its wheels are losing traction. The reflex will try aggressive maneuvers to allow the robot to recover from this situation This reflex is enabled by default. Virtual Wall reflex The reflex.REFLEX_VIRTUAL_WALL ROS 2 parameter enables ( true ) or disables ( false ) the cliff reflex. It will trigger as soon as the robot detects an iRobot virtual wall it will move the robot away from it. The reflex will continue until the robot has cleared the virtual wall. This reflex is enabled by default. Wheel drop reflex The reflex.REFLEX_WHEEL_DROP ROS 2 parameter enables ( true ) or disables ( false ) the cliff reflex. It will trigger as soon as the robot detects that one of its wheels is fully extended (dropped). The robot will drive the other wheel in order to return to a flat surface. This reflex is enabled by default.","title":"Reflexes"},{"location":"api/reflexes/#reflexes","text":"With the word \"reflex\" we denote a set of autonomous reactive behaviors that the Create\u00ae 3 robot will trigger when it detects obstacles or hazards. Reflexes are high-priority behaviors and will temporarily override any user-provided command for their short duration. Reflexes can be enabled or disabled on the Create\u00ae 3 using the corresponding ROS 2 parameters exposed by the motion_control ROS 2 node.","title":"Reflexes"},{"location":"api/reflexes/#reflex-parameters","text":"The reflexes_enabled parameter controls whether reflexes should be executed or not. It accepts boolean values. When this parameter is set to false , no reflexes will be enabled, regardless of their specific parameters values. Reflexes are enabled by default.","title":"Reflex parameters"},{"location":"api/reflexes/#bumps-reflex","text":"The reflex.REFLEX_BUMP ROS 2 parameter enables ( true ) or disables ( false ) the bump reflex. It will trigger as soon as the robot bumps into an obstacle and it will move the robot away from it. The reflex will continue until the robot has cleared the bump. This reflex is enabled by default.","title":"Bumps reflex"},{"location":"api/reflexes/#cliffs-reflex","text":"The reflex.REFLEX_CLIFF ROS 2 parameter enables ( true ) or disables ( false ) the cliff reflex. It will trigger as soon as the robot detects a cliff and it will move the robot away from it. The reflex will continue until the robot has cleared the cliff. This reflex is enabled by default.","title":"Cliffs reflex"},{"location":"api/reflexes/#dock-avoidance-reflex","text":"The reflex.REFLEX_DOCK_AVOID ROS 2 parameter enables ( true ) or disables ( false ) the dock avoidance reflex. It will trigger as soon as the robot gets close to the dock and tries to move towards it. The reflex will stop forward movements. This reflex is disabled by default.","title":"Dock avoidance reflex"},{"location":"api/reflexes/#gyro-calibration-reflex","text":"The reflex.REFLEX_GYRO_CAL ROS 2 parameter enables ( true ) or disables ( false ) the gyro calibration reflex. It will trigger while the robot is stationary and will try to recalibrate the internal gyroscope. This reflex is enabled by default.","title":"Gyro calibration reflex"},{"location":"api/reflexes/#panic-reflex","text":"The reflex.REFLEX_PANIC ROS 2 parameter enables ( true ) or disables ( false ) the dock avoidance reflex. It will trigger when the robot is trapped and unable to clear obstacles or hazards. The reflex will try more aggressive maneuvers to allow the robot to recover from this situation This reflex is enabled by default.","title":"Panic reflex"},{"location":"api/reflexes/#proximity-slowdown-reflex","text":"The reflex.REFLEX_PROXIMITY_SLOWDOWN ROS 2 parameter enables ( true ) or disables ( false ) the dock avoidance reflex. It will trigger when the robot's IR sensors detect an obstacle in close proximity. The reflex will reduce the robot movement speed in order to better prepare for an eventual impact. This reflex is enabled by default.","title":"Proximity slowdown reflex"},{"location":"api/reflexes/#stuck-reflex","text":"The reflex.REFLEX_STUCK ROS 2 parameter enables ( true ) or disables ( false ) the dock avoidance reflex. It will trigger when the robot is stuck, i.e. it's pushing against an obstacle and its wheels are losing traction. The reflex will try aggressive maneuvers to allow the robot to recover from this situation This reflex is enabled by default.","title":"Stuck reflex"},{"location":"api/reflexes/#virtual-wall-reflex","text":"The reflex.REFLEX_VIRTUAL_WALL ROS 2 parameter enables ( true ) or disables ( false ) the cliff reflex. It will trigger as soon as the robot detects an iRobot virtual wall it will move the robot away from it. The reflex will continue until the robot has cleared the virtual wall. This reflex is enabled by default.","title":"Virtual Wall reflex"},{"location":"api/reflexes/#wheel-drop-reflex","text":"The reflex.REFLEX_WHEEL_DROP ROS 2 parameter enables ( true ) or disables ( false ) the cliff reflex. It will trigger as soon as the robot detects that one of its wheels is fully extended (dropped). The robot will drive the other wheel in order to return to a flat surface. This reflex is enabled by default.","title":"Wheel drop reflex"},{"location":"api/ros2/","text":"ROS 2 APIs The Create\u00ae 3 robot is based on ROS 2 and, as such, it exposes all its user-facing APIs through ROS 2 entities (topics, services, actions and parameters). The purpose of this page is to give a quick overview of these ROS 2 APIs. The robot uses standard ROS 2 messages when available and implements custom messages in irobot_create_msgs for data not represented by standard messages. If you are interested in more details, have a look at the other pages in this section. ROS 2 Topics You can see the ROS 2 topics exposed by the Create\u00ae 3 robot running the ros2 topic list command. $ ros2 topic list -t /battery_state [sensor_msgs/msg/BatteryState] /cmd_audio [irobot_create_msgs/msg/AudioNoteVector] /cmd_lightring [irobot_create_msgs/msg/LightringLeds] /cmd_vel [geometry_msgs/msg/Twist] /dock [irobot_create_msgs/msg/Dock] /hazard_detection [irobot_create_msgs/msg/HazardDetectionVector] /imu [sensor_msgs/msg/Imu] /interface_buttons [irobot_create_msgs/msg/InterfaceButtons] /ir_intensity [irobot_create_msgs/msg/IrIntensityVector] /ir_opcode [irobot_create_msgs/msg/IrOpcode] /kidnap_status [irobot_create_msgs/msg/KidnapStatus] /mouse [irobot_create_msgs/msg/Mouse] /odom [nav_msgs/msg/Odometry] /parameter_events [rcl_interfaces/msg/ParameterEvent] /rosout [rcl_interfaces/msg/Log] /slip_status [irobot_create_msgs/msg/SlipStatus] /stop_status [irobot_create_msgs/msg/StopStatus] /tf [tf2_msgs/msg/TFMessage] /tf_static [tf2_msgs/msg/TFMessage] /wheel_status [irobot_create_msgs/msg/WheelStatus] /wheel_ticks [irobot_create_msgs/msg/WheelTicks] /wheel_vels [irobot_create_msgs/msg/WheelVels] Note that the Create\u00ae 3 robot will produce data on most of these topics. On the other hand, some of them can be used by the user to send commands to the Create\u00ae 3 robot. In particular, the Create\u00ae 3 robot will subscribe to the following topics: /cmd_audio : use this topic to play specified notes from the robot speaker. /cmd_lightring : use this topic to change the color of the light ring. /cmd_vel : use this topic to command velocities in the robot reference frame. For more details on the content of these topics, please have a look at their corresponding sections. Hazards Odometry User Interface If you have trouble seeing the topics using ros2 topic list , ensure that the robot's RMW_IMPLEMENTATION matches the one on your machine; see Network Configuration for more information about R OS m iddle w are (RMW). Additionally, the command line ros2 topic utility could use stale cached discovery information; try running it with additional arguments ros2 topic list --no-daemon --spin-time 10 to not use the cached information. ROS 2 Services You can see the ROS 2 servers exposed by the Create\u00ae 3 robot running the ros2 service list command. $ ros2 service list -t /e_stop [irobot_create_msgs/srv/EStop] /motion_control/describe_parameters [rcl_interfaces/srv/DescribeParameters] /motion_control/get_parameter_types [rcl_interfaces/srv/GetParameterTypes] /motion_control/get_parameters [rcl_interfaces/srv/GetParameters] /motion_control/list_parameters [rcl_interfaces/srv/ListParameters] /motion_control/set_parameters [rcl_interfaces/srv/SetParameters] /motion_control/set_parameters_atomically [rcl_interfaces/srv/SetParametersAtomically] /robot_power [irobot_create_msgs/srv/RobotPower] /robot_state/change_state [lifecycle_msgs/srv/ChangeState] /robot_state/get_available_states [lifecycle_msgs/srv/GetAvailableStates] /robot_state/get_available_transitions [lifecycle_msgs/srv/GetAvailableTransitions] /robot_state/get_state [lifecycle_msgs/srv/GetState] /robot_state/get_transition_graph [lifecycle_msgs/srv/GetAvailableTransitions] /static_transform/change_state [lifecycle_msgs/srv/ChangeState] /static_transform/describe_parameters [rcl_interfaces/srv/DescribeParameters] /static_transform/get_available_states [lifecycle_msgs/srv/GetAvailableStates] /static_transform/get_available_transitions [lifecycle_msgs/srv/GetAvailableTransitions] /static_transform/get_parameter_types [rcl_interfaces/srv/GetParameterTypes] /static_transform/get_parameters [rcl_interfaces/srv/GetParameters] /static_transform/get_state [lifecycle_msgs/srv/GetState] /static_transform/get_transition_graph [lifecycle_msgs/srv/GetAvailableTransitions] /static_transform/list_parameters [rcl_interfaces/srv/ListParameters] /static_transform/set_parameters [rcl_interfaces/srv/SetParameters] /static_transform/set_parameters_atomically [rcl_interfaces/srv/SetParametersAtomically] ROS 2 Actions You can see the ROS 2 action servers exposed by the Create\u00ae 3 robot running the ros2 action list command. $ ros2 action list -t /audio_note_sequence [irobot_create_msgs/action/AudioNoteSequence] /dock [irobot_create_msgs/action/DockServo] /drive_arc [irobot_create_msgs/action/DriveArc] /drive_distance [irobot_create_msgs/action/DriveDistance] /led_animation [irobot_create_msgs/action/LedAnimation] /navigate_to_position [irobot_create_msgs/action/NavigateToPosition] /rotate_angle [irobot_create_msgs/action/RotateAngle] /undock [irobot_create_msgs/action/Undock] /wall_follow [irobot_create_msgs/action/WallFollow] For more details on how to use these actions, please have a look at their corresponding sections. Docking Drive Goals ROS 2 Parameters You can see the ROS 2 parameters exposed by the Create\u00ae 3 robot running the ros2 param list command. $ ros2 param list /motion_control: max_speed qos_overrides./parameter_events.publisher.depth qos_overrides./parameter_events.publisher.durability qos_overrides./parameter_events.publisher.history qos_overrides./parameter_events.publisher.reliability reflexes.REFLEX_BUMP reflexes.REFLEX_CLIFF reflexes.REFLEX_DOCK_AVOID reflexes.REFLEX_GYRO_CAL reflexes.REFLEX_PANIC reflexes.REFLEX_PROXIMITY_SLOWDOWN reflexes.REFLEX_STUCK reflexes.REFLEX_VIRTUAL_WALL reflexes.REFLEX_WHEEL_DROP reflexes_enabled safety_override use_sim_time wheel_accel_limit /static_transform: qos_overrides./parameter_events.publisher.depth qos_overrides./parameter_events.publisher.durability qos_overrides./parameter_events.publisher.history qos_overrides./parameter_events.publisher.reliability qos_overrides./tf_static.publisher.depth qos_overrides./tf_static.publisher.history qos_overrides./tf_static.publisher.reliability use_sim_time wheel_base wheels_encoder_resolution wheels_radius /ui_mgr: lightring_led_brightness qos_overrides./parameter_events.publisher.depth qos_overrides./parameter_events.publisher.durability qos_overrides./parameter_events.publisher.history qos_overrides./parameter_events.publisher.reliability use_sim_time Morphology parameters such as wheel_base and wheels_encoder_resolution are read-only parameters that can be used in order to implement your estimation or motion control algorithms. The safety_override parameter allows user to enable/disable safety features. For more details, please have a look at the safety documentation . The lightring_led_brightness parameter allows user to increase/decrease the brightness of the light ring. For more details on how to use and configure reflexes, please have a look at the reflexes documentation . ROS 2 Coordinate System The Create\u00ae 3 robot produces a fused odometry that combines its wheel encoders, IMU, and ground optical flow sensor. It exposes this coordinate system both through the tf tree and the /odom publication. The /tf tree from the robot exposes ROS 2 standard transforms odom->base_footprint and odom->base_link with corresponding definitions odom , base_footprint , and base_link . base_link is defined to be at the center of rotation of the robot with z height intersecting the floor. base_footprint is the 2D planar representation base_link with the pitch and roll factors removed from the transform, this can be useful for applications like 2D planar mapping. The /odom publication contains the same position and orientation as base_link in the form of a nav_msgs/msg/Odometry message with velocity additionally populated. The robot's coordinate system is right-handed, with x forward, y left, and z up. $ ros2 topic echo /tf transforms: - header: stamp: sec: 1646697192 nanosec: 702756640 frame_id: odom child_frame_id: base_footprint transform: translation: x: -0.00043813258525915444 y: -3.853919679386308e-06 z: 0.0 rotation: x: 0.0 y: 0.0 z: 2.5629995434428565e-05 w: 1.0 - header: stamp: sec: 1646697192 nanosec: 702756640 frame_id: odom child_frame_id: base_link transform: translation: x: -0.00043813258525915444 y: -3.853919679386308e-06 z: 0.0 rotation: x: -0.0016827837098389864 y: -0.009617267176508904 z: 9.441922884434462e-06 w: 0.9999523162841797","title":"ROS 2 Interface"},{"location":"api/ros2/#ros-2-apis","text":"The Create\u00ae 3 robot is based on ROS 2 and, as such, it exposes all its user-facing APIs through ROS 2 entities (topics, services, actions and parameters). The purpose of this page is to give a quick overview of these ROS 2 APIs. The robot uses standard ROS 2 messages when available and implements custom messages in irobot_create_msgs for data not represented by standard messages. If you are interested in more details, have a look at the other pages in this section.","title":"ROS 2 APIs"},{"location":"api/ros2/#ros-2-topics","text":"You can see the ROS 2 topics exposed by the Create\u00ae 3 robot running the ros2 topic list command. $ ros2 topic list -t /battery_state [sensor_msgs/msg/BatteryState] /cmd_audio [irobot_create_msgs/msg/AudioNoteVector] /cmd_lightring [irobot_create_msgs/msg/LightringLeds] /cmd_vel [geometry_msgs/msg/Twist] /dock [irobot_create_msgs/msg/Dock] /hazard_detection [irobot_create_msgs/msg/HazardDetectionVector] /imu [sensor_msgs/msg/Imu] /interface_buttons [irobot_create_msgs/msg/InterfaceButtons] /ir_intensity [irobot_create_msgs/msg/IrIntensityVector] /ir_opcode [irobot_create_msgs/msg/IrOpcode] /kidnap_status [irobot_create_msgs/msg/KidnapStatus] /mouse [irobot_create_msgs/msg/Mouse] /odom [nav_msgs/msg/Odometry] /parameter_events [rcl_interfaces/msg/ParameterEvent] /rosout [rcl_interfaces/msg/Log] /slip_status [irobot_create_msgs/msg/SlipStatus] /stop_status [irobot_create_msgs/msg/StopStatus] /tf [tf2_msgs/msg/TFMessage] /tf_static [tf2_msgs/msg/TFMessage] /wheel_status [irobot_create_msgs/msg/WheelStatus] /wheel_ticks [irobot_create_msgs/msg/WheelTicks] /wheel_vels [irobot_create_msgs/msg/WheelVels] Note that the Create\u00ae 3 robot will produce data on most of these topics. On the other hand, some of them can be used by the user to send commands to the Create\u00ae 3 robot. In particular, the Create\u00ae 3 robot will subscribe to the following topics: /cmd_audio : use this topic to play specified notes from the robot speaker. /cmd_lightring : use this topic to change the color of the light ring. /cmd_vel : use this topic to command velocities in the robot reference frame. For more details on the content of these topics, please have a look at their corresponding sections. Hazards Odometry User Interface If you have trouble seeing the topics using ros2 topic list , ensure that the robot's RMW_IMPLEMENTATION matches the one on your machine; see Network Configuration for more information about R OS m iddle w are (RMW). Additionally, the command line ros2 topic utility could use stale cached discovery information; try running it with additional arguments ros2 topic list --no-daemon --spin-time 10 to not use the cached information.","title":"ROS 2 Topics"},{"location":"api/ros2/#ros-2-services","text":"You can see the ROS 2 servers exposed by the Create\u00ae 3 robot running the ros2 service list command. $ ros2 service list -t /e_stop [irobot_create_msgs/srv/EStop] /motion_control/describe_parameters [rcl_interfaces/srv/DescribeParameters] /motion_control/get_parameter_types [rcl_interfaces/srv/GetParameterTypes] /motion_control/get_parameters [rcl_interfaces/srv/GetParameters] /motion_control/list_parameters [rcl_interfaces/srv/ListParameters] /motion_control/set_parameters [rcl_interfaces/srv/SetParameters] /motion_control/set_parameters_atomically [rcl_interfaces/srv/SetParametersAtomically] /robot_power [irobot_create_msgs/srv/RobotPower] /robot_state/change_state [lifecycle_msgs/srv/ChangeState] /robot_state/get_available_states [lifecycle_msgs/srv/GetAvailableStates] /robot_state/get_available_transitions [lifecycle_msgs/srv/GetAvailableTransitions] /robot_state/get_state [lifecycle_msgs/srv/GetState] /robot_state/get_transition_graph [lifecycle_msgs/srv/GetAvailableTransitions] /static_transform/change_state [lifecycle_msgs/srv/ChangeState] /static_transform/describe_parameters [rcl_interfaces/srv/DescribeParameters] /static_transform/get_available_states [lifecycle_msgs/srv/GetAvailableStates] /static_transform/get_available_transitions [lifecycle_msgs/srv/GetAvailableTransitions] /static_transform/get_parameter_types [rcl_interfaces/srv/GetParameterTypes] /static_transform/get_parameters [rcl_interfaces/srv/GetParameters] /static_transform/get_state [lifecycle_msgs/srv/GetState] /static_transform/get_transition_graph [lifecycle_msgs/srv/GetAvailableTransitions] /static_transform/list_parameters [rcl_interfaces/srv/ListParameters] /static_transform/set_parameters [rcl_interfaces/srv/SetParameters] /static_transform/set_parameters_atomically [rcl_interfaces/srv/SetParametersAtomically]","title":"ROS 2 Services"},{"location":"api/ros2/#ros-2-actions","text":"You can see the ROS 2 action servers exposed by the Create\u00ae 3 robot running the ros2 action list command. $ ros2 action list -t /audio_note_sequence [irobot_create_msgs/action/AudioNoteSequence] /dock [irobot_create_msgs/action/DockServo] /drive_arc [irobot_create_msgs/action/DriveArc] /drive_distance [irobot_create_msgs/action/DriveDistance] /led_animation [irobot_create_msgs/action/LedAnimation] /navigate_to_position [irobot_create_msgs/action/NavigateToPosition] /rotate_angle [irobot_create_msgs/action/RotateAngle] /undock [irobot_create_msgs/action/Undock] /wall_follow [irobot_create_msgs/action/WallFollow] For more details on how to use these actions, please have a look at their corresponding sections. Docking Drive Goals","title":"ROS 2 Actions"},{"location":"api/ros2/#ros-2-parameters","text":"You can see the ROS 2 parameters exposed by the Create\u00ae 3 robot running the ros2 param list command. $ ros2 param list /motion_control: max_speed qos_overrides./parameter_events.publisher.depth qos_overrides./parameter_events.publisher.durability qos_overrides./parameter_events.publisher.history qos_overrides./parameter_events.publisher.reliability reflexes.REFLEX_BUMP reflexes.REFLEX_CLIFF reflexes.REFLEX_DOCK_AVOID reflexes.REFLEX_GYRO_CAL reflexes.REFLEX_PANIC reflexes.REFLEX_PROXIMITY_SLOWDOWN reflexes.REFLEX_STUCK reflexes.REFLEX_VIRTUAL_WALL reflexes.REFLEX_WHEEL_DROP reflexes_enabled safety_override use_sim_time wheel_accel_limit /static_transform: qos_overrides./parameter_events.publisher.depth qos_overrides./parameter_events.publisher.durability qos_overrides./parameter_events.publisher.history qos_overrides./parameter_events.publisher.reliability qos_overrides./tf_static.publisher.depth qos_overrides./tf_static.publisher.history qos_overrides./tf_static.publisher.reliability use_sim_time wheel_base wheels_encoder_resolution wheels_radius /ui_mgr: lightring_led_brightness qos_overrides./parameter_events.publisher.depth qos_overrides./parameter_events.publisher.durability qos_overrides./parameter_events.publisher.history qos_overrides./parameter_events.publisher.reliability use_sim_time Morphology parameters such as wheel_base and wheels_encoder_resolution are read-only parameters that can be used in order to implement your estimation or motion control algorithms. The safety_override parameter allows user to enable/disable safety features. For more details, please have a look at the safety documentation . The lightring_led_brightness parameter allows user to increase/decrease the brightness of the light ring. For more details on how to use and configure reflexes, please have a look at the reflexes documentation .","title":"ROS 2 Parameters"},{"location":"api/ros2/#ros-2-coordinate-system","text":"The Create\u00ae 3 robot produces a fused odometry that combines its wheel encoders, IMU, and ground optical flow sensor. It exposes this coordinate system both through the tf tree and the /odom publication. The /tf tree from the robot exposes ROS 2 standard transforms odom->base_footprint and odom->base_link with corresponding definitions odom , base_footprint , and base_link . base_link is defined to be at the center of rotation of the robot with z height intersecting the floor. base_footprint is the 2D planar representation base_link with the pitch and roll factors removed from the transform, this can be useful for applications like 2D planar mapping. The /odom publication contains the same position and orientation as base_link in the form of a nav_msgs/msg/Odometry message with velocity additionally populated. The robot's coordinate system is right-handed, with x forward, y left, and z up. $ ros2 topic echo /tf transforms: - header: stamp: sec: 1646697192 nanosec: 702756640 frame_id: odom child_frame_id: base_footprint transform: translation: x: -0.00043813258525915444 y: -3.853919679386308e-06 z: 0.0 rotation: x: 0.0 y: 0.0 z: 2.5629995434428565e-05 w: 1.0 - header: stamp: sec: 1646697192 nanosec: 702756640 frame_id: odom child_frame_id: base_link transform: translation: x: -0.00043813258525915444 y: -3.853919679386308e-06 z: 0.0 rotation: x: -0.0016827837098389864 y: -0.009617267176508904 z: 9.441922884434462e-06 w: 0.9999523162841797","title":"ROS 2 Coordinate System"},{"location":"api/safety/","text":"Create\u00ae 3 Safety Overrides By default, the Create\u00ae 3 robot has some safety features enabled. Their purpose is to make sure that the robot does not get into dangerous sitations and it is able to detect and react properly to cliff hazards. Safety features are configurable by the user through a ROS 2 parameter. This will allow more adventurous users to have full control over the robot. Important The robot will temporarily re-enable all safety features whenever it is commanded to execute any of the built-in autonomous behaviors. The safety_override parameter exposed by the motion_control ROS 2 node should be used to control and override safety features. It's a string parameter and it accepts 3 possible values: none Safety features are fully enabled. This is the default value. backup_only Overrides the robot backup limit safety feature, disabling it. full Safety features are fully disabled. For example, in order to completely disable safety mechanisms: ros2 param set /motion_control safety_override full Note that the parameter server will reject changes if there are typos in the new safety value set by the users. The following sections briefly describe what the safety features do. Backup Limit Attention If you disable the backup limit, the robot will not stop if there are cliffs while driving backward! The Create\u00ae 3 robot is equipped with cliff sensors, but they are located only in the front of the robot. This means that the robot is not able to detect cliff hazards while driving backward. In order to make the robot safe, the robot's default policy is to never move backward further than what would be safe should there be a cliff directly behind the robot. Under standard circumstances, the robot is allowed to briefly move backward only if it has first traveled forward (i.e. if it has \"explored\" the space making sure that it does not present cliff hazards). If the robot is kidnapped (i.e. first lifted by the user and then placed somewhere), the backup limit will immediately trigger. The Create\u00ae 3 robot signals to the user when the backup limit is about to be triggered in multiple ways: Through the HazardDetectionsVector ROS 2 message: an hazard of type BACKUP_LIMIT will be published in the vector. By logging a warning message. By changing the color of the lights to orange. If the user ignores these alerts and keeps driving the robot backward, the robot will suddenly brake and come to a stop. From this point, the robot will refuse any backward movement. The user will have to drive the robot forward in order to re-enable backward movements. As soon as the user drives the robot forward, the lights will go back to the default white color. Safe backward movements will not be immediately re-allowed, but rather the robot will have to keep driving forward for a little while. This moment will be identified by the BACKUP_LIMIT hazard disappearing from the HazardDetectionsVector message. The backup limit and its related alerts are active only when safety_override = none . Maximum speed Attention If you increase the speed above the default one, the robot may not be able to stop in time when a cliff is detected! In order to stop when a cliff hazard is detected, it is also necessary to make sure that the robot is not driving too fast. Safety features will thus limit the robot speed. You can check the current maximum robot speed through the read-only parameter max_speed exposed by the motion_control ROS 2 node. When safety_override = none or safety_override = backup_only the maximum speed will be limited to 0.306 m/s. By fully disabling safety features, i.e. setting safety_override = full the robot will be allowed to drive at its true maximum speed of 0.460 m/s. Acceleration Limits The robot exposes its commanding acceleration limits through the wheel_accel_limit parameter on the motion_control node. The velocity commands sent to the wheels will be ramped with the acceleration profile associated with this value. The value defaults to its maximum settable 900 mm/s^2 . If using heavier payloads, it is advisable to decrease acceleration limits. E-Stop The robot exposes a service with name e_stop that when sent e_stop_on true will turn off the robot's wheels. The robot will not respond to velocity commands when e_stop_on is true. See EStop.srv For example, in order to enable the E-Stop: ros2 service call /e_stop irobot_create_msgs/srv/EStop \"{e_stop_on: true}\" Wheel Status There is a wheel_status topic which publishes WheelStatus.msg exposing whether the wheels are enabled (disabled if E-Stop is engaged) and the present PWM duty cycle and current through each wheel.","title":"Safety"},{"location":"api/safety/#create-3-safety-overrides","text":"By default, the Create\u00ae 3 robot has some safety features enabled. Their purpose is to make sure that the robot does not get into dangerous sitations and it is able to detect and react properly to cliff hazards. Safety features are configurable by the user through a ROS 2 parameter. This will allow more adventurous users to have full control over the robot. Important The robot will temporarily re-enable all safety features whenever it is commanded to execute any of the built-in autonomous behaviors. The safety_override parameter exposed by the motion_control ROS 2 node should be used to control and override safety features. It's a string parameter and it accepts 3 possible values: none Safety features are fully enabled. This is the default value. backup_only Overrides the robot backup limit safety feature, disabling it. full Safety features are fully disabled. For example, in order to completely disable safety mechanisms: ros2 param set /motion_control safety_override full Note that the parameter server will reject changes if there are typos in the new safety value set by the users. The following sections briefly describe what the safety features do.","title":"Create\u00ae 3 Safety Overrides"},{"location":"api/safety/#backup-limit","text":"Attention If you disable the backup limit, the robot will not stop if there are cliffs while driving backward! The Create\u00ae 3 robot is equipped with cliff sensors, but they are located only in the front of the robot. This means that the robot is not able to detect cliff hazards while driving backward. In order to make the robot safe, the robot's default policy is to never move backward further than what would be safe should there be a cliff directly behind the robot. Under standard circumstances, the robot is allowed to briefly move backward only if it has first traveled forward (i.e. if it has \"explored\" the space making sure that it does not present cliff hazards). If the robot is kidnapped (i.e. first lifted by the user and then placed somewhere), the backup limit will immediately trigger. The Create\u00ae 3 robot signals to the user when the backup limit is about to be triggered in multiple ways: Through the HazardDetectionsVector ROS 2 message: an hazard of type BACKUP_LIMIT will be published in the vector. By logging a warning message. By changing the color of the lights to orange. If the user ignores these alerts and keeps driving the robot backward, the robot will suddenly brake and come to a stop. From this point, the robot will refuse any backward movement. The user will have to drive the robot forward in order to re-enable backward movements. As soon as the user drives the robot forward, the lights will go back to the default white color. Safe backward movements will not be immediately re-allowed, but rather the robot will have to keep driving forward for a little while. This moment will be identified by the BACKUP_LIMIT hazard disappearing from the HazardDetectionsVector message. The backup limit and its related alerts are active only when safety_override = none .","title":"Backup Limit"},{"location":"api/safety/#maximum-speed","text":"Attention If you increase the speed above the default one, the robot may not be able to stop in time when a cliff is detected! In order to stop when a cliff hazard is detected, it is also necessary to make sure that the robot is not driving too fast. Safety features will thus limit the robot speed. You can check the current maximum robot speed through the read-only parameter max_speed exposed by the motion_control ROS 2 node. When safety_override = none or safety_override = backup_only the maximum speed will be limited to 0.306 m/s. By fully disabling safety features, i.e. setting safety_override = full the robot will be allowed to drive at its true maximum speed of 0.460 m/s.","title":"Maximum speed"},{"location":"api/safety/#acceleration-limits","text":"The robot exposes its commanding acceleration limits through the wheel_accel_limit parameter on the motion_control node. The velocity commands sent to the wheels will be ramped with the acceleration profile associated with this value. The value defaults to its maximum settable 900 mm/s^2 . If using heavier payloads, it is advisable to decrease acceleration limits.","title":"Acceleration Limits"},{"location":"api/safety/#e-stop","text":"The robot exposes a service with name e_stop that when sent e_stop_on true will turn off the robot's wheels. The robot will not respond to velocity commands when e_stop_on is true. See EStop.srv For example, in order to enable the E-Stop: ros2 service call /e_stop irobot_create_msgs/srv/EStop \"{e_stop_on: true}\"","title":"E-Stop"},{"location":"api/safety/#wheel-status","text":"There is a wheel_status topic which publishes WheelStatus.msg exposing whether the wheels are enabled (disabled if E-Stop is engaged) and the present PWM duty cycle and current through each wheel.","title":"Wheel Status"},{"location":"api/ui/","text":"User Interface The Create\u00ae 3 robot can interact with the user through its buttons and its light ring. Responding to buttons presses Whenever a button on the Create\u00ae 3 robot is pressed, its information will be published on the interface_buttons topic. By subscribing to this topic, you will be able to detect when to start your custom policies. Changing the light ring colors Attention The Create\u00ae 3 robot uses its light ring to notify the user about critical events. If you override its color, you may not notice these events. You can change the color of the light ring on your Create\u00ae 3 robot by publishing a corresponding message on the cmd_lightring topic. ros2 topic pub /cmd_lightring irobot_create_msgs/msg/LightringLeds \"{override_system: true, leds: [{red: 255, green: 0, blue: 0}, {red: 0, green: 255, blue: 0}, {red: 0, green: 0, blue: 255}, {red: 255, green: 255, blue: 0}, {red: 255, green: 0, blue: 255}, {red: 0, green: 255, blue: 255}]}\" The easiest way to return lights to the default color (and relinquish their control to the robot) is to publish an empty message on the topic. ros2 topic pub /cmd_lightring irobot_create_msgs/msg/LightringLeds \"{}\" Additionally, an action server named led_animation can take Blink or Spin animation goals to execute a pattern for a fixed duration. See LedAnimation.action . For example you can run the following: ros2 action send_goal led_animation irobot_create_msgs/action/LedAnimation \"{animation_type: 1, lightring: {leds: [{red: 255, green: 0, blue: 0}, {red: 0, green: 255, blue: 0}, {red: 0, green: 0, blue: 255}, {red: 255, green: 255, blue: 0}, {red: 255, green: 0, blue: 255}, {red: 0, green: 255, blue: 255}], override_system: true},max_runtime: {sec: 500, nanosec: 0}}\" Playing sound through the speakers You can play sound out of your Create\u00ae 3 robot speakers by publishing a corresponding message on the cmd_audio topic. ros2 topic pub --once /cmd_audio irobot_create_msgs/msg/AudioNoteVector \"{append: false, notes: [{frequency: 100, max_runtime: {sec: 1,nanosec: 0}}, {frequency: 50, max_runtime: {sec: 1,nanosec: 0}}]}\" This example command will play 2 notes at the given frequencies back to back with the given 1 second length for each note. append is used to dictate the policy if an audio sequence is already playing when a new value comes in on the topic. append: true tells the sound manager to play this audio sequence after the current sequence finishes playing. append: false tell the sound manager to override any currently playing sequence with the new sequence. Publishing an empty notes vector with append: false will stop any currently playing audio sequences. Additionally, an action server named audio_note_sequence can take an AudioNoteVector and a number of iterations to play it. See AudioNoteSequence.action . The action goal will succeed when the sequence has finished playing so you can coordinate audio runtime with other actions. If you set iterations to -1, it will play until it is canceled. For example you can run the following: ros2 action send_goal /audio_note_sequence irobot_create_msgs/action/AudioNoteSequence \"{iterations: 3,note_sequence:{append: false, notes: [{frequency: 100, max_runtime: {sec: 1,nanosec: 0}}, {frequency: 50, max_runtime: {sec: 1,nanosec: 0}}]}}\"","title":"User Interface"},{"location":"api/ui/#user-interface","text":"The Create\u00ae 3 robot can interact with the user through its buttons and its light ring.","title":"User Interface"},{"location":"api/ui/#responding-to-buttons-presses","text":"Whenever a button on the Create\u00ae 3 robot is pressed, its information will be published on the interface_buttons topic. By subscribing to this topic, you will be able to detect when to start your custom policies.","title":"Responding to buttons presses"},{"location":"api/ui/#changing-the-light-ring-colors","text":"Attention The Create\u00ae 3 robot uses its light ring to notify the user about critical events. If you override its color, you may not notice these events. You can change the color of the light ring on your Create\u00ae 3 robot by publishing a corresponding message on the cmd_lightring topic. ros2 topic pub /cmd_lightring irobot_create_msgs/msg/LightringLeds \"{override_system: true, leds: [{red: 255, green: 0, blue: 0}, {red: 0, green: 255, blue: 0}, {red: 0, green: 0, blue: 255}, {red: 255, green: 255, blue: 0}, {red: 255, green: 0, blue: 255}, {red: 0, green: 255, blue: 255}]}\" The easiest way to return lights to the default color (and relinquish their control to the robot) is to publish an empty message on the topic. ros2 topic pub /cmd_lightring irobot_create_msgs/msg/LightringLeds \"{}\" Additionally, an action server named led_animation can take Blink or Spin animation goals to execute a pattern for a fixed duration. See LedAnimation.action . For example you can run the following: ros2 action send_goal led_animation irobot_create_msgs/action/LedAnimation \"{animation_type: 1, lightring: {leds: [{red: 255, green: 0, blue: 0}, {red: 0, green: 255, blue: 0}, {red: 0, green: 0, blue: 255}, {red: 255, green: 255, blue: 0}, {red: 255, green: 0, blue: 255}, {red: 0, green: 255, blue: 255}], override_system: true},max_runtime: {sec: 500, nanosec: 0}}\"","title":"Changing the light ring colors"},{"location":"api/ui/#playing-sound-through-the-speakers","text":"You can play sound out of your Create\u00ae 3 robot speakers by publishing a corresponding message on the cmd_audio topic. ros2 topic pub --once /cmd_audio irobot_create_msgs/msg/AudioNoteVector \"{append: false, notes: [{frequency: 100, max_runtime: {sec: 1,nanosec: 0}}, {frequency: 50, max_runtime: {sec: 1,nanosec: 0}}]}\" This example command will play 2 notes at the given frequencies back to back with the given 1 second length for each note. append is used to dictate the policy if an audio sequence is already playing when a new value comes in on the topic. append: true tells the sound manager to play this audio sequence after the current sequence finishes playing. append: false tell the sound manager to override any currently playing sequence with the new sequence. Publishing an empty notes vector with append: false will stop any currently playing audio sequences. Additionally, an action server named audio_note_sequence can take an AudioNoteVector and a number of iterations to play it. See AudioNoteSequence.action . The action goal will succeed when the sequence has finished playing so you can coordinate audio runtime with other actions. If you set iterations to -1, it will play until it is canceled. For example you can run the following: ros2 action send_goal /audio_note_sequence irobot_create_msgs/action/AudioNoteSequence \"{iterations: 3,note_sequence:{append: false, notes: [{frequency: 100, max_runtime: {sec: 1,nanosec: 0}}, {frequency: 50, max_runtime: {sec: 1,nanosec: 0}}]}}\"","title":"Playing sound through the speakers"},{"location":"examples/actuators-cli/","text":"Actuators via ROS 2 Command Line This page describes how to use the the Create\u00ae 3 robot's actuators using the ROS 2 command line tools. Audio Play a sequence of notes Play a happy sequence once: ros2 topic pub /cmd_audio irobot_create_msgs/msg/AudioNoteVector \"{append: false, notes: [{frequency: 392, max_runtime: {sec: 0,nanosec: 177500000}}, {frequency: 523, max_runtime: {sec: 0,nanosec: 355000000}}, {frequency: 587, max_runtime: {sec: 0,nanosec: 177500000}}, {frequency: 784, max_runtime: {sec: 0,nanosec: 533000000}}]}\" -1 Play a sad sequence once: ros2 topic pub /cmd_audio irobot_create_msgs/msg/AudioNoteVector \"{append: false, notes: [{frequency: 369, max_runtime: {sec: 0,nanosec: 355000000}}, {frequency: 300, max_runtime: {sec: 0,nanosec: 533000000}}]}\" -1 Play a scary sequence forever: ros2 action send_goal /audio_note_sequence irobot_create_msgs/action/AudioNoteSequence \"{iterations: -1, note_sequence: {append: false, notes: [{frequency: 82, max_runtime: {sec: 1,nanosec: 0}}, {frequency: 87, max_runtime: {sec: 1,nanosec: 0}}]}}\" Driving Command velocities You can drive around the Create\u00ae 3 robot by publishing standard Twist messages on the /cmd_vel topic. ros2 topic pub -r 20 /cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 0.2, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 0.0}}\" Drive a distance The Drive Distance action takes a distance in meters and maximum speed in meters per second. ros2 action send_goal /drive_distance irobot_create_msgs/action/DriveDistance \"{distance: 0.5,max_translation_speed: 0.15}\" Rotate an angle The Rotate Angle action takes a turn angle in radians and maximum angular speed in radians per second. ros2 action send_goal /rotate_angle irobot_create_msgs/action/RotateAngle \"{angle: 1.57,max_rotation_speed: 0.5}\" Drive an arc The Drive Arc action takes a arc angle in radians, arc radius in meters, translate direction (1 for forward and -1 for rearward) and and maximum translation speed in meters per second. $ ros2 action send_goal /drive_arc irobot_create_msgs/action/DriveArc \"{angle: 1.57,radius: 0.3,translate_direction: 1,max_translation_speed: 0.3}\" Navigate to position The Navigate to Position action takes a goal position (in meters) and orientation (in radians). The orientation must be specified as part of the message, but it can be ignored by setting achieve_goal_heading to false . $ ros2 action send_goal /navigate_to_position irobot_create_msgs/action/NavigateToPosition \"{achieve_goal_heading: true,goal_pose:{pose:{position:{x: 1,y: 0.2,z: 0.0}, orientation:{x: 0.0,y: 0.0, z: 0.0, w: 1.0}}}}\" Docking Undock the robot If the Create\u00ae 3 robot is on its dock, you can undock it with: ros2 action send_goal /undock irobot_create_msgs/action/Undock \"{}\" Dock the robot If the Create\u00ae 3 robot sees its dock (check the docking documentation for details) you can dock it with: ros2 action send_goal /dock irobot_create_msgs/action/DockServo \"{}\" E-Stop Enable E-Stop If under the robot's control, its light ring will turn yellow when the motors are disabled. ros2 service call /e_stop irobot_create_msgs/srv/EStop \"{e_stop_on: true}\" Disable E-Stop ros2 service call /e_stop irobot_create_msgs/srv/EStop \"{e_stop_on: false}\" Light Ring Multicolor ros2 topic pub /cmd_lightring irobot_create_msgs/msg/LightringLeds \"{override_system: true, leds: [{red: 255, green: 0, blue: 0}, {red: 0, green: 255, blue: 0}, {red: 0, green: 0, blue: 255}, {red: 255, green: 255, blue: 0}, {red: 255, green: 0, blue: 255}, {red: 0, green: 255, blue: 255}]}\" -1 Return static control to Create 3 Robot ros2 topic pub /cmd_lightring irobot_create_msgs/msg/LightringLeds \"{override_system: false, leds: [{red: 255, green: 0, blue: 0}, {red: 0, green: 255, blue: 0}, {red: 0, green: 0, blue: 255}, {red: 255, green: 255, blue: 0}, {red: 255, green: 0, blue: 255}, {red: 0, green: 255, blue: 255}]}\" -1 Animations # Note: type 1 is blink and type 2 is spin ros2 action send_goal /led_animation irobot_create_msgs/action/LedAnimation \"{animation_type: 2,max_runtime:{sec: 10,nanosec: 0},lightring:{override_system: true, leds: [{red: 255, green: 0, blue: 0}, {red: 0, green: 255, blue: 0}, {red: 0, green: 0, blue: 255}, {red: 255, green: 255, blue: 0}, {red: 255, green: 0, blue: 255}, {red: 0, green: 255, blue: 255}]}}\" Robot Power Warning: this turns the robot and payload off immediately ros2 service call /robot_power irobot_create_msgs/srv/RobotPower \"{}\"","title":"Actuators via CLI"},{"location":"examples/actuators-cli/#actuators-via-ros-2-command-line","text":"This page describes how to use the the Create\u00ae 3 robot's actuators using the ROS 2 command line tools.","title":"Actuators via ROS 2 Command Line"},{"location":"examples/actuators-cli/#audio","text":"","title":"Audio"},{"location":"examples/actuators-cli/#play-a-sequence-of-notes","text":"Play a happy sequence once: ros2 topic pub /cmd_audio irobot_create_msgs/msg/AudioNoteVector \"{append: false, notes: [{frequency: 392, max_runtime: {sec: 0,nanosec: 177500000}}, {frequency: 523, max_runtime: {sec: 0,nanosec: 355000000}}, {frequency: 587, max_runtime: {sec: 0,nanosec: 177500000}}, {frequency: 784, max_runtime: {sec: 0,nanosec: 533000000}}]}\" -1 Play a sad sequence once: ros2 topic pub /cmd_audio irobot_create_msgs/msg/AudioNoteVector \"{append: false, notes: [{frequency: 369, max_runtime: {sec: 0,nanosec: 355000000}}, {frequency: 300, max_runtime: {sec: 0,nanosec: 533000000}}]}\" -1 Play a scary sequence forever: ros2 action send_goal /audio_note_sequence irobot_create_msgs/action/AudioNoteSequence \"{iterations: -1, note_sequence: {append: false, notes: [{frequency: 82, max_runtime: {sec: 1,nanosec: 0}}, {frequency: 87, max_runtime: {sec: 1,nanosec: 0}}]}}\"","title":"Play a sequence of notes"},{"location":"examples/actuators-cli/#driving","text":"","title":"Driving"},{"location":"examples/actuators-cli/#command-velocities","text":"You can drive around the Create\u00ae 3 robot by publishing standard Twist messages on the /cmd_vel topic. ros2 topic pub -r 20 /cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 0.2, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 0.0}}\"","title":"Command velocities"},{"location":"examples/actuators-cli/#drive-a-distance","text":"The Drive Distance action takes a distance in meters and maximum speed in meters per second. ros2 action send_goal /drive_distance irobot_create_msgs/action/DriveDistance \"{distance: 0.5,max_translation_speed: 0.15}\"","title":"Drive a distance"},{"location":"examples/actuators-cli/#rotate-an-angle","text":"The Rotate Angle action takes a turn angle in radians and maximum angular speed in radians per second. ros2 action send_goal /rotate_angle irobot_create_msgs/action/RotateAngle \"{angle: 1.57,max_rotation_speed: 0.5}\"","title":"Rotate an angle"},{"location":"examples/actuators-cli/#drive-an-arc","text":"The Drive Arc action takes a arc angle in radians, arc radius in meters, translate direction (1 for forward and -1 for rearward) and and maximum translation speed in meters per second. $ ros2 action send_goal /drive_arc irobot_create_msgs/action/DriveArc \"{angle: 1.57,radius: 0.3,translate_direction: 1,max_translation_speed: 0.3}\"","title":"Drive an arc"},{"location":"examples/actuators-cli/#navigate-to-position","text":"The Navigate to Position action takes a goal position (in meters) and orientation (in radians). The orientation must be specified as part of the message, but it can be ignored by setting achieve_goal_heading to false . $ ros2 action send_goal /navigate_to_position irobot_create_msgs/action/NavigateToPosition \"{achieve_goal_heading: true,goal_pose:{pose:{position:{x: 1,y: 0.2,z: 0.0}, orientation:{x: 0.0,y: 0.0, z: 0.0, w: 1.0}}}}\"","title":"Navigate to position"},{"location":"examples/actuators-cli/#docking","text":"","title":"Docking"},{"location":"examples/actuators-cli/#undock-the-robot","text":"If the Create\u00ae 3 robot is on its dock, you can undock it with: ros2 action send_goal /undock irobot_create_msgs/action/Undock \"{}\"","title":"Undock the robot"},{"location":"examples/actuators-cli/#dock-the-robot","text":"If the Create\u00ae 3 robot sees its dock (check the docking documentation for details) you can dock it with: ros2 action send_goal /dock irobot_create_msgs/action/DockServo \"{}\"","title":"Dock the robot"},{"location":"examples/actuators-cli/#e-stop","text":"","title":"E-Stop"},{"location":"examples/actuators-cli/#enable-e-stop","text":"If under the robot's control, its light ring will turn yellow when the motors are disabled. ros2 service call /e_stop irobot_create_msgs/srv/EStop \"{e_stop_on: true}\"","title":"Enable E-Stop"},{"location":"examples/actuators-cli/#disable-e-stop","text":"ros2 service call /e_stop irobot_create_msgs/srv/EStop \"{e_stop_on: false}\"","title":"Disable E-Stop"},{"location":"examples/actuators-cli/#light-ring","text":"","title":"Light Ring"},{"location":"examples/actuators-cli/#multicolor","text":"ros2 topic pub /cmd_lightring irobot_create_msgs/msg/LightringLeds \"{override_system: true, leds: [{red: 255, green: 0, blue: 0}, {red: 0, green: 255, blue: 0}, {red: 0, green: 0, blue: 255}, {red: 255, green: 255, blue: 0}, {red: 255, green: 0, blue: 255}, {red: 0, green: 255, blue: 255}]}\" -1","title":"Multicolor"},{"location":"examples/actuators-cli/#return-static-control-to-create-3-robot","text":"ros2 topic pub /cmd_lightring irobot_create_msgs/msg/LightringLeds \"{override_system: false, leds: [{red: 255, green: 0, blue: 0}, {red: 0, green: 255, blue: 0}, {red: 0, green: 0, blue: 255}, {red: 255, green: 255, blue: 0}, {red: 255, green: 0, blue: 255}, {red: 0, green: 255, blue: 255}]}\" -1","title":"Return static control to Create 3 Robot"},{"location":"examples/actuators-cli/#animations","text":"# Note: type 1 is blink and type 2 is spin ros2 action send_goal /led_animation irobot_create_msgs/action/LedAnimation \"{animation_type: 2,max_runtime:{sec: 10,nanosec: 0},lightring:{override_system: true, leds: [{red: 255, green: 0, blue: 0}, {red: 0, green: 255, blue: 0}, {red: 0, green: 0, blue: 255}, {red: 255, green: 255, blue: 0}, {red: 255, green: 0, blue: 255}, {red: 0, green: 255, blue: 255}]}}\"","title":"Animations"},{"location":"examples/actuators-cli/#robot-power","text":"Warning: this turns the robot and payload off immediately ros2 service call /robot_power irobot_create_msgs/srv/RobotPower \"{}\"","title":"Robot Power"},{"location":"examples/create3_examples/","text":"iRobot\u00ae Create\u00ae 3 Examples The create3_examples Github repository contains examples of C++ and Python applications that can be used to control a Create\u00ae 3 robot with ROS 2 and develop your navigation application.","title":"Navigation Apps"},{"location":"examples/create3_examples/#irobot-create-3-examples","text":"The create3_examples Github repository contains examples of C++ and Python applications that can be used to control a Create\u00ae 3 robot with ROS 2 and develop your navigation application.","title":"iRobot\u00ae Create\u00ae 3 Examples"},{"location":"examples/driving-cli/","text":"This page has been moved.","title":"Driving cli"},{"location":"examples/sensors-cli/","text":"Sensors via ROS 2 Command Line This page describes how to read the the Create\u00ae 3 robot's sensors using the ROS 2 command line tools. Overview Reading the robot's sensors is as simple as ros2 topic echo {topic} where {topic} is the topic of interest. If you're not sure what topics are available, you can type ros2 topic list --no-daemon --spin-time 10 The --no-daemon and --spin-time arguments are not strictly necessary, but they may help with initial discovery. A non-exhaustive set of examples These are relatively straighforward, but for fun: Battery State ros2 topic echo /battery_state Buttons ros2 topic echo /interface_buttons Docking State ros2 topic echo /dock IR Docking Sensor ros2 topic echo /ir_opcode IR Proximity Sensors ros2 topic echo /ir_intensity Wheel Odometry ros2 topic echo /odom Wheel Status (includes PWM and current) ros2 topic echo /wheel_status","title":"Sensors via CLI"},{"location":"examples/sensors-cli/#sensors-via-ros-2-command-line","text":"This page describes how to read the the Create\u00ae 3 robot's sensors using the ROS 2 command line tools.","title":"Sensors via ROS 2 Command Line"},{"location":"examples/sensors-cli/#overview","text":"Reading the robot's sensors is as simple as ros2 topic echo {topic} where {topic} is the topic of interest. If you're not sure what topics are available, you can type ros2 topic list --no-daemon --spin-time 10 The --no-daemon and --spin-time arguments are not strictly necessary, but they may help with initial discovery.","title":"Overview"},{"location":"examples/sensors-cli/#a-non-exhaustive-set-of-examples","text":"These are relatively straighforward, but for fun:","title":"A non-exhaustive set of examples"},{"location":"examples/sensors-cli/#battery-state","text":"ros2 topic echo /battery_state","title":"Battery State"},{"location":"examples/sensors-cli/#buttons","text":"ros2 topic echo /interface_buttons","title":"Buttons"},{"location":"examples/sensors-cli/#docking-state","text":"ros2 topic echo /dock","title":"Docking State"},{"location":"examples/sensors-cli/#ir-docking-sensor","text":"ros2 topic echo /ir_opcode","title":"IR Docking Sensor"},{"location":"examples/sensors-cli/#ir-proximity-sensors","text":"ros2 topic echo /ir_intensity","title":"IR Proximity Sensors"},{"location":"examples/sensors-cli/#wheel-odometry","text":"ros2 topic echo /odom","title":"Wheel Odometry"},{"location":"examples/sensors-cli/#wheel-status-includes-pwm-and-current","text":"ros2 topic echo /wheel_status","title":"Wheel Status (includes PWM and current)"},{"location":"hw/adapter/","text":"iRobot\u00ae Create\u00ae 3 Adapter Board Overview The iRobot\u00ae Create\u00ae 3 robot has two electrical connections exposed via the Adapter Board. The connections are accessible within the robot once the cargo bay is removed. The Adapter Board is also visible through the top cover of the robot, where its indicators are visible, and the USB/BLE toggle can be switched. Power Connections Unregulated Battery Port The unregulated battery port is a JST XH-style connector, with pin 1 as the positive terminal of the battery, and pin 2 as the negative terminal. These terminals are labeled on the bottom side of the board and are visible with the robot on its back and the cargo bay removed. The board is capable of supplying a maximum of 2 A of current at the current battery voltage (14.4 V nominal, 12 V min, 16.8 V max), enforced by a PTC resettable fuse in the robot. This port is always on when the battery is powered on. Notice Do not back-feed power into the robot through this port, and do not attempt to use the robot without its battery installed. USB-C\u00ae Connector The USB-C\u00ae connector 1 provides a USB 2.0 Host connection into the robot with 5.13 V at 3.0 A provided to power downstream connections. The power is disabled on this port unless a proper USB-C\u00ae downstream device is connected. The 5 V source powering this port is not guaranteed to stay enabled when the battery reports 0% state of charge (below 12.0 V). The USB data connection is made only when the USB/BLE toggle switch plunger is slid toward the USB icon. Total Power Output The USB-C\u00ae port draws its power from the unregulated battery connection which, as mentioned above, is limited to 2 A at the battery voltage. This means there is only around 28.8 W total power shared between both power outputs (assuming the battery is at 14.4 V). If power is drawn through the USB-C\u00ae connector, then less power is available through the unregulated battery port and vice versa. Example As an example, if a full 5 V @ 3 A are drawn from the USB-C\u00ae port, the battery is currently measuring 14.4 V, and the switching regulator is 90% efficient, then a maximum of 0.84 A 2 can be drawn from the unregulated battery port before the resettable fuse will trip (and depending on ambient temperature, even more margin may be necessary). USB/BLE Toggle The USB/BLE toggle routes the robot's single USB Host connection either to the USB-C\u00ae port (useful for connecting to single-board computers with OTG or device ports) or to the on-board Bluetooth\u00ae Low Energy 3 module. This module can be used to interact with the iRobot Coding app . Indicators Orange Indicator The orange indicator (D3) is illuminated when the USB-C\u00ae port is powering a downstream device, whether or not a data connection is being made. Yellow Indicator The yellow indicator (D2) is illuminated when the robot's internal 5 V bus is enabled. There is a hardware error if this LED is extinguished while the green indicator is illuminated. Green Indicator The green indicator (D300) is illuminated when the robot's battery is switched on. Blue Indicator The blue indicator (D6) is illuminated when the BLE radio is turned on. It flashes when it is connected to a host. USB-C\u00ae is a trademark of USB Implementers Forum. \u21a9 Maximum current computed as: 2 A - (5 V * 3 A / 0.90 / 14.4 V) = 0.84 A \u21a9 The Bluetooth\u00ae word mark and logos are registered trademarks owned by Bluetooth SIG, Inc. and any use of such marks by iRobot is under license. \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"Adapter Board"},{"location":"hw/adapter/#irobot-create-3-adapter-board","text":"","title":"iRobot\u00ae Create\u00ae 3 Adapter Board"},{"location":"hw/adapter/#overview","text":"The iRobot\u00ae Create\u00ae 3 robot has two electrical connections exposed via the Adapter Board. The connections are accessible within the robot once the cargo bay is removed. The Adapter Board is also visible through the top cover of the robot, where its indicators are visible, and the USB/BLE toggle can be switched.","title":"Overview"},{"location":"hw/adapter/#power-connections","text":"","title":"Power Connections"},{"location":"hw/adapter/#unregulated-battery-port","text":"The unregulated battery port is a JST XH-style connector, with pin 1 as the positive terminal of the battery, and pin 2 as the negative terminal. These terminals are labeled on the bottom side of the board and are visible with the robot on its back and the cargo bay removed. The board is capable of supplying a maximum of 2 A of current at the current battery voltage (14.4 V nominal, 12 V min, 16.8 V max), enforced by a PTC resettable fuse in the robot. This port is always on when the battery is powered on. Notice Do not back-feed power into the robot through this port, and do not attempt to use the robot without its battery installed.","title":"Unregulated Battery Port"},{"location":"hw/adapter/#usb-c-connector","text":"The USB-C\u00ae connector 1 provides a USB 2.0 Host connection into the robot with 5.13 V at 3.0 A provided to power downstream connections. The power is disabled on this port unless a proper USB-C\u00ae downstream device is connected. The 5 V source powering this port is not guaranteed to stay enabled when the battery reports 0% state of charge (below 12.0 V). The USB data connection is made only when the USB/BLE toggle switch plunger is slid toward the USB icon.","title":"USB-C\u00ae Connector"},{"location":"hw/adapter/#total-power-output","text":"The USB-C\u00ae port draws its power from the unregulated battery connection which, as mentioned above, is limited to 2 A at the battery voltage. This means there is only around 28.8 W total power shared between both power outputs (assuming the battery is at 14.4 V). If power is drawn through the USB-C\u00ae connector, then less power is available through the unregulated battery port and vice versa. Example As an example, if a full 5 V @ 3 A are drawn from the USB-C\u00ae port, the battery is currently measuring 14.4 V, and the switching regulator is 90% efficient, then a maximum of 0.84 A 2 can be drawn from the unregulated battery port before the resettable fuse will trip (and depending on ambient temperature, even more margin may be necessary).","title":"Total Power Output"},{"location":"hw/adapter/#usbble-toggle","text":"The USB/BLE toggle routes the robot's single USB Host connection either to the USB-C\u00ae port (useful for connecting to single-board computers with OTG or device ports) or to the on-board Bluetooth\u00ae Low Energy 3 module. This module can be used to interact with the iRobot Coding app .","title":"USB/BLE Toggle"},{"location":"hw/adapter/#indicators","text":"","title":"Indicators"},{"location":"hw/adapter/#orange-indicator","text":"The orange indicator (D3) is illuminated when the USB-C\u00ae port is powering a downstream device, whether or not a data connection is being made.","title":"Orange Indicator"},{"location":"hw/adapter/#yellow-indicator","text":"The yellow indicator (D2) is illuminated when the robot's internal 5 V bus is enabled. There is a hardware error if this LED is extinguished while the green indicator is illuminated.","title":"Yellow Indicator"},{"location":"hw/adapter/#green-indicator","text":"The green indicator (D300) is illuminated when the robot's battery is switched on.","title":"Green Indicator"},{"location":"hw/adapter/#blue-indicator","text":"The blue indicator (D6) is illuminated when the BLE radio is turned on. It flashes when it is connected to a host. USB-C\u00ae is a trademark of USB Implementers Forum. \u21a9 Maximum current computed as: 2 A - (5 V * 3 A / 0.90 / 14.4 V) = 0.84 A \u21a9 The Bluetooth\u00ae word mark and logos are registered trademarks owned by Bluetooth SIG, Inc. and any use of such marks by iRobot is under license. \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"Blue Indicator"},{"location":"hw/electrical/","text":"iRobot\u00ae Create\u00ae 3 Electrical System Robot Battery The iRobot\u00ae Create\u00ae 3 robot uses a standard Lithium Ion Battery for Roomba\u00ae e & i series robots. The battery shipping with the robot is a 26 Wh, 4S Lithium Ion smart battery pack, with a nominal voltage of 14.4 V (12 V min, 16.8 V max). It will report a 0% state of charge when the total voltage of the pack reaches 12.0 V. It will self-protect and disconnect from any load at 10.8 V or lower. Notice If the robot is approaching a 0% state of charge and the application does not believe it will make it to the dock, the robot should be powered down using the /robot_power service. If the battery self-protects, its internal management system may refuse to charge until it is reset. Resetting the battery is accomplished by removing the battery from the robot for at least fifteen minutes, at which point it should be reinstalled in the robot and the robot placed on the charger. Notice When not overridden, the robot's light ring will flash red to indicate low battery state, at about 10% state of charge. It is recommended not to run the robot for extended periods of time in this state. Charge the battery by placing Create\u00ae 3 on the included iRobot\u00ae Home Base\u2122 Charging Station. The light ring will show the state of charge and animate while the battery is charging. Notice Always remove the Create\u00ae 3 robot\u2019s battery prior to dismantling, adjusting, altering, or affecting the robot\u2019s chassis at the risk of damaging the battery, robot, or both. Do not attempt to use the robot without its battery installed. Tip Keep the robot on the Home Base\u2122 charging station (or power down the robot by holding down the power button for 10 seconds) when not in use to prevent the battery from discharging. Buttons and Light Ring Overview The iRobot\u00ae Create\u00ae 3 has three buttons on its top face. The center button is marked with a power icon, while the flanking buttons are marked with one or two dots. The center button also contains a ring of six RGB LEDs. Detailed information about the use of these buttons and LEDs can be found here. Adapter Board Overview The iRobot\u00ae Create\u00ae 3 robot exposes connections and some status indicators via the Adapter Board. The Adapter Board also adds a Bluetooth\u00ae Low Energy 1 interface to the core robot. Detailed information on the Adapter Board can be found here. The Bluetooth\u00ae word mark and logos are registered trademarks owned by Bluetooth SIG, Inc. and any use of such marks by iRobot is under license. \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"Electrical Overview"},{"location":"hw/electrical/#irobot-create-3-electrical-system","text":"","title":"iRobot\u00ae Create\u00ae 3 Electrical System"},{"location":"hw/electrical/#robot-battery","text":"The iRobot\u00ae Create\u00ae 3 robot uses a standard Lithium Ion Battery for Roomba\u00ae e & i series robots. The battery shipping with the robot is a 26 Wh, 4S Lithium Ion smart battery pack, with a nominal voltage of 14.4 V (12 V min, 16.8 V max). It will report a 0% state of charge when the total voltage of the pack reaches 12.0 V. It will self-protect and disconnect from any load at 10.8 V or lower. Notice If the robot is approaching a 0% state of charge and the application does not believe it will make it to the dock, the robot should be powered down using the /robot_power service. If the battery self-protects, its internal management system may refuse to charge until it is reset. Resetting the battery is accomplished by removing the battery from the robot for at least fifteen minutes, at which point it should be reinstalled in the robot and the robot placed on the charger. Notice When not overridden, the robot's light ring will flash red to indicate low battery state, at about 10% state of charge. It is recommended not to run the robot for extended periods of time in this state. Charge the battery by placing Create\u00ae 3 on the included iRobot\u00ae Home Base\u2122 Charging Station. The light ring will show the state of charge and animate while the battery is charging. Notice Always remove the Create\u00ae 3 robot\u2019s battery prior to dismantling, adjusting, altering, or affecting the robot\u2019s chassis at the risk of damaging the battery, robot, or both. Do not attempt to use the robot without its battery installed. Tip Keep the robot on the Home Base\u2122 charging station (or power down the robot by holding down the power button for 10 seconds) when not in use to prevent the battery from discharging.","title":"Robot Battery"},{"location":"hw/electrical/#buttons-and-light-ring-overview","text":"The iRobot\u00ae Create\u00ae 3 has three buttons on its top face. The center button is marked with a power icon, while the flanking buttons are marked with one or two dots. The center button also contains a ring of six RGB LEDs. Detailed information about the use of these buttons and LEDs can be found here.","title":"Buttons and Light Ring Overview"},{"location":"hw/electrical/#adapter-board-overview","text":"The iRobot\u00ae Create\u00ae 3 robot exposes connections and some status indicators via the Adapter Board. The Adapter Board also adds a Bluetooth\u00ae Low Energy 1 interface to the core robot. Detailed information on the Adapter Board can be found here. The Bluetooth\u00ae word mark and logos are registered trademarks owned by Bluetooth SIG, Inc. and any use of such marks by iRobot is under license. \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"Adapter Board Overview"},{"location":"hw/face/","text":"iRobot\u00ae Create\u00ae 3 Buttons and Light Ring Buttons The iRobot\u00ae Create\u00ae 3 has three buttons on its top face. These buttons expose core functionality of the robot, but can also be overridden by the user. Button 1 Button 1 (to the left of center) is marked with a single dot (\u2022). If held for ten seconds, the robot will go into \"standby\" mode, keeping its charging circuitry active, and continuing to power the payload. The robot can be placed on the dock to charge or to keep the payload alive in this mode. To wake the robot from standby, hold the center button for one second. Button presses can be accessed by the user in both ROS 2 and iRobot Coding / Bluetooth 1 modes. Button 2 Button 2 (to the right of center) is marked with two dots (\u2022\u2022). This button is a user button only. Button presses can be accessed by the user in both ROS 2 and iRobot Coding / Bluetooth 1 modes. Center Button The center button is marked with a power (\u23fb) icon. If held for seven seconds, the robot will go into \"storage mode,\" disconnecting its internal battery from the robot and its payload. When the robot is in storage mode, the only way to power it on is to place it on the dock. The button also contains a light ring on its circumference. Light Ring The center button contains a ring of six RGB LEDs which communicate state about the robot. The LEDs expose internal state information about the robot, but can also be overridden by the user. While Charging Spinning White Partial White Solid White Pulsing Red Robot is booting up. Wait for \"happy sound\" to play. Robot is charging (Example shows 40%) Robot is 100% charged Battery < 10% While Idle Spinning White Solid White Pulsing Red Solid Red Robot is booting up. Wait for \"happy sound\" to play. Robot is powered on Battery <10%. Place on charger. Robot error. Cycle power. While Connecting to Robot Access Point Spinning Cyan Solid Cyan Access Point is active. Select robot from device\u2019s Wi-Fi menu. Device is connected to robot\u2019s Access Point page. While Connecting to Wi-Fi Solid Cyan Spinning Cyan Quick Green Flash Solid White Device is connected to robot\u2019s Access Point page. Robot attempting to connect to Wi-Fi Success connecting to Wi-Fi Robot successfully disconnected from Access Point page Yellow with Red Yellow with Green Yellow with Blue Yellow with White Solid Yellow Failed Wi-Fi password Robot cannot connect to network access point DHCP failed to obtain a valid IP address before time-out. Try again. Access point located but failed association. Try again. Failed to connect to Wi-Fi for unknown reason While Updating Firmware Solid Cyan Spinning Blue Spinning White Solid White Device is connected to robot\u2019s Access Point page. Robot downloading update file Robot updating firmware Do not remove from dock Update successful While Operating Spinning White Solid White Pulsing Red Half Solid Orange Half Solid Yellow Robot is booting up. Wait for \"happy sound\" to play. Default light color Battery <10%. Back-up safety activated Wheels disabled The Bluetooth\u00ae word mark and logos are registered trademarks owned by Bluetooth SIG, Inc. and any use of such marks by iRobot is under license. \u21a9 \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"Buttons and Light Ring"},{"location":"hw/face/#irobot-create-3-buttons-and-light-ring","text":"","title":"iRobot\u00ae Create\u00ae 3 Buttons and Light Ring"},{"location":"hw/face/#buttons","text":"The iRobot\u00ae Create\u00ae 3 has three buttons on its top face. These buttons expose core functionality of the robot, but can also be overridden by the user.","title":"Buttons"},{"location":"hw/face/#button-1","text":"Button 1 (to the left of center) is marked with a single dot (\u2022). If held for ten seconds, the robot will go into \"standby\" mode, keeping its charging circuitry active, and continuing to power the payload. The robot can be placed on the dock to charge or to keep the payload alive in this mode. To wake the robot from standby, hold the center button for one second. Button presses can be accessed by the user in both ROS 2 and iRobot Coding / Bluetooth 1 modes.","title":"Button 1"},{"location":"hw/face/#button-2","text":"Button 2 (to the right of center) is marked with two dots (\u2022\u2022). This button is a user button only. Button presses can be accessed by the user in both ROS 2 and iRobot Coding / Bluetooth 1 modes.","title":"Button 2"},{"location":"hw/face/#center-button","text":"The center button is marked with a power (\u23fb) icon. If held for seven seconds, the robot will go into \"storage mode,\" disconnecting its internal battery from the robot and its payload. When the robot is in storage mode, the only way to power it on is to place it on the dock. The button also contains a light ring on its circumference.","title":"Center Button"},{"location":"hw/face/#light-ring","text":"The center button contains a ring of six RGB LEDs which communicate state about the robot. The LEDs expose internal state information about the robot, but can also be overridden by the user.","title":"Light Ring"},{"location":"hw/face/#while-charging","text":"Spinning White Partial White Solid White Pulsing Red Robot is booting up. Wait for \"happy sound\" to play. Robot is charging (Example shows 40%) Robot is 100% charged Battery < 10%","title":"While Charging"},{"location":"hw/face/#while-idle","text":"Spinning White Solid White Pulsing Red Solid Red Robot is booting up. Wait for \"happy sound\" to play. Robot is powered on Battery <10%. Place on charger. Robot error. Cycle power.","title":"While Idle"},{"location":"hw/face/#while-connecting-to-robot-access-point","text":"Spinning Cyan Solid Cyan Access Point is active. Select robot from device\u2019s Wi-Fi menu. Device is connected to robot\u2019s Access Point page.","title":"While Connecting to Robot Access Point"},{"location":"hw/face/#while-connecting-to-wi-fi","text":"Solid Cyan Spinning Cyan Quick Green Flash Solid White Device is connected to robot\u2019s Access Point page. Robot attempting to connect to Wi-Fi Success connecting to Wi-Fi Robot successfully disconnected from Access Point page Yellow with Red Yellow with Green Yellow with Blue Yellow with White Solid Yellow Failed Wi-Fi password Robot cannot connect to network access point DHCP failed to obtain a valid IP address before time-out. Try again. Access point located but failed association. Try again. Failed to connect to Wi-Fi for unknown reason","title":"While Connecting to Wi-Fi"},{"location":"hw/face/#while-updating-firmware","text":"Solid Cyan Spinning Blue Spinning White Solid White Device is connected to robot\u2019s Access Point page. Robot downloading update file Robot updating firmware Do not remove from dock Update successful","title":"While Updating Firmware"},{"location":"hw/face/#while-operating","text":"Spinning White Solid White Pulsing Red Half Solid Orange Half Solid Yellow Robot is booting up. Wait for \"happy sound\" to play. Default light color Battery <10%. Back-up safety activated Wheels disabled The Bluetooth\u00ae word mark and logos are registered trademarks owned by Bluetooth SIG, Inc. and any use of such marks by iRobot is under license. \u21a9 \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"While Operating"},{"location":"hw/hookup/","text":"iRobot\u00ae Create\u00ae 3 Hookup Guide The iRobot\u00ae Create\u00ae 3 has a USB-C\u00ae 1 connector implementing a USB 2.0 host capable of 5 V @ 3 A continuous, which can be used to power and communicate with various downstream devices. Here are some hookup examples. Raspberry Pi\u00ae The Raspberry Pi\u00ae 2 mounting scheme does not match Create\u00ae 3's faceplate or cargo bay hole pattern; here are two 3D-printable mounts. The larger mount is more rigid but requires three times as much time to print. Small Mount (128kB) Large Mount (520kB) Raspberry Pi\u00ae 4 Since the Raspberry Pi\u00ae 2 4 has a USB-C\u00ae port capable of an OTG connection, a cable with a USB-C\u00ae connector on both ends is all that is required. The Raspberry Pi\u00ae is pictured in the cargo bay with the large mount, and the Adapter Board is removed from the robot for clarity. Raspberry Pi\u00ae 1-3 Model B The original Raspberry Pi\u00ae through the Raspberry Pi\u00ae 3 do not have upstream (device) ports, so it's a little more difficult to connect and power them cleanly. We suggest using a USB-C\u00ae hub which includes an integrated USB to Ethernet adapter as the cleanest way to go. It's also possible to power the Raspberry Pi\u00ae using the USB-C\u00ae port on the Adapter Board with the help of a downstream connection adapter like this one and make the data connection over Wi-Fi. Raspberry Pi\u00ae Zero This should be the same as the Raspberry Pi\u00ae 4. The Micro-USB connector labeled \"USB\" is an OTG port capable of being an Ethernet Gadget; use a USB Micro B to USB-C\u00ae cable to connect it directly to the robot's Adapter Board. NVIDIA\u00ae Jetson Nano\u2122 2GB The Jetson Nano\u2122 3 2GB has a USB-C\u00ae port (J2) for power and a USB Micro-B port (J13) for downstream data. This can be connected to the Create 3 most simply using a USB-C\u00ae hub and two cables -- USB A to Micro-B and USB A to USB-C\u00ae. NVIDIA\u00ae Jetson Xavier NX\u2122 Developer Kit The Jetson Xavier NX\u2122 Developer Kit has a 5.5mm x 2.5mm barrel connector jack (J16) for power (9 V to 20 V) and a USB Micro-B port (J5) for downstream data. This can be powered from the unregulated battery port of the Create\u00ae 3 adapter board by using a JST-XH female connector to DC barrel plug cable. The data connection is established by using a USB Micro B to USB-C\u00ae cable. Mounting NVIDIA\u00ae Jetson Xavier NX\u2122 Developer Kit You can 3d print the mount adapter to place the Jetson Xavier NX Developer Kit in the cargo bay or on the faceplate. Note If you are 3d printing the above mount adapter, use support to support overhang areas. ( slicing example ) You need four (4) M3 x 6mm screws; cap head is suggested. USB-C\u00ae is a trademark of USB Implementers Forum. \u21a9 Raspberry Pi\u00ae is a trademark of Raspberry Pi Trading. \u21a9 \u21a9 NVIDIA and Jetson Nano are trademarks or registered trademarks of NVIDIA Corporation. \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"Hookup Examples"},{"location":"hw/hookup/#irobot-create-3-hookup-guide","text":"The iRobot\u00ae Create\u00ae 3 has a USB-C\u00ae 1 connector implementing a USB 2.0 host capable of 5 V @ 3 A continuous, which can be used to power and communicate with various downstream devices. Here are some hookup examples.","title":"iRobot\u00ae Create\u00ae 3 Hookup Guide"},{"location":"hw/hookup/#raspberry-pi","text":"The Raspberry Pi\u00ae 2 mounting scheme does not match Create\u00ae 3's faceplate or cargo bay hole pattern; here are two 3D-printable mounts. The larger mount is more rigid but requires three times as much time to print. Small Mount (128kB) Large Mount (520kB)","title":"Raspberry Pi\u00ae"},{"location":"hw/hookup/#raspberry-pi-4","text":"Since the Raspberry Pi\u00ae 2 4 has a USB-C\u00ae port capable of an OTG connection, a cable with a USB-C\u00ae connector on both ends is all that is required. The Raspberry Pi\u00ae is pictured in the cargo bay with the large mount, and the Adapter Board is removed from the robot for clarity.","title":"Raspberry Pi\u00ae 4"},{"location":"hw/hookup/#raspberry-pi-1-3-model-b","text":"The original Raspberry Pi\u00ae through the Raspberry Pi\u00ae 3 do not have upstream (device) ports, so it's a little more difficult to connect and power them cleanly. We suggest using a USB-C\u00ae hub which includes an integrated USB to Ethernet adapter as the cleanest way to go. It's also possible to power the Raspberry Pi\u00ae using the USB-C\u00ae port on the Adapter Board with the help of a downstream connection adapter like this one and make the data connection over Wi-Fi.","title":"Raspberry Pi\u00ae 1-3 Model B"},{"location":"hw/hookup/#raspberry-pi-zero","text":"This should be the same as the Raspberry Pi\u00ae 4. The Micro-USB connector labeled \"USB\" is an OTG port capable of being an Ethernet Gadget; use a USB Micro B to USB-C\u00ae cable to connect it directly to the robot's Adapter Board.","title":"Raspberry Pi\u00ae Zero"},{"location":"hw/hookup/#nvidia-jetson-nanotm-2gb","text":"The Jetson Nano\u2122 3 2GB has a USB-C\u00ae port (J2) for power and a USB Micro-B port (J13) for downstream data. This can be connected to the Create 3 most simply using a USB-C\u00ae hub and two cables -- USB A to Micro-B and USB A to USB-C\u00ae.","title":"NVIDIA\u00ae Jetson Nano\u2122 2GB"},{"location":"hw/hookup/#nvidia-jetson-xavier-nxtm-developer-kit","text":"The Jetson Xavier NX\u2122 Developer Kit has a 5.5mm x 2.5mm barrel connector jack (J16) for power (9 V to 20 V) and a USB Micro-B port (J5) for downstream data. This can be powered from the unregulated battery port of the Create\u00ae 3 adapter board by using a JST-XH female connector to DC barrel plug cable. The data connection is established by using a USB Micro B to USB-C\u00ae cable.","title":"NVIDIA\u00ae Jetson Xavier NX\u2122 Developer Kit"},{"location":"hw/hookup/#mounting-nvidia-jetson-xavier-nxtm-developer-kit","text":"You can 3d print the mount adapter to place the Jetson Xavier NX Developer Kit in the cargo bay or on the faceplate. Note If you are 3d printing the above mount adapter, use support to support overhang areas. ( slicing example ) You need four (4) M3 x 6mm screws; cap head is suggested. USB-C\u00ae is a trademark of USB Implementers Forum. \u21a9 Raspberry Pi\u00ae is a trademark of Raspberry Pi Trading. \u21a9 \u21a9 NVIDIA and Jetson Nano are trademarks or registered trademarks of NVIDIA Corporation. \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"Mounting NVIDIA\u00ae Jetson Xavier NX\u2122 Developer Kit"},{"location":"hw/mechanical/","text":"iRobot\u00ae Create\u00ae 3 Mechanical System The Create\u00ae 3 is a differential drive robot designed for traversing relatively-flat, indoor environments. The drive wheels feature independent suspensions to help the robot overcome typical carpet or door thresholds. Payload Sensors or accessories can be attached to the faceplate or internal cargo bay, both of which feature a regular 12 mm grid of 3 mm diameter mounting holes. The maximum recommended payload weight (without changing acceleration limits) is 9 kg directly above the center of gravity of the chassis. The robot can handle more weight with reduced acceleration limits or careful management of the load. Notice To prevent damage to the robot or payload, ensure the faceplate and/or payload are well secured to the chassis before use. Removing or attaching the faceplate The faceplate is removed by rotating it on the center axis of the robot using the thumb rests. Four locating pins on the top cover are used to install and retain the faceplate. Notice Always remove the Create\u00ae 3 robot\u2019s faceplate prior to dismantling, adjusting, altering, or affecting the faceplate at the risk of damaging the robot. Locking the faceplate If you would like to lock the faceplate and prevent it from rotating, you may insert an M3 self-tapping screw or pin in the faceplate hole marked with the image of a screw (while the faceplate is attached). Attachment Tips and Tricks Self-tapping screws with bosses The Create\u00ae 3 robot's holes are sized for M3 or #4 screws. It is possible to use special self-tapping plastic screws (or in a pinch, sheet metal or wood screws) to screw through the cover into a 3D-printed boss. Many of our example STLs use this technique. Machine screws with nuts The Create\u00ae 3 robot's holes are sized for M3 or #4 screws. Cable ties Cable ties (also known as zip ties) can be threaded through the 3 mm holes. 2.5 mm widths are common and fit nicely. Twist ties Twist ties are a quick, cheap, and reusable way for holding wires or other non-structural pieces. Plastic Rivets Push-in, split-shank plastic rivets (either for M3 or 0.115\" holes) are fast and inexpensive ways to mount thin stock to the Create\u00ae 3 robot's faceplate. Highly sophisticated interlocking brick system The typical toy brick has its studs spaced at 8 mm, while Create\u00ae 3's holes are spaced at 12 mm. It is possible to place an adapter (576 kB) into every other hole in order to connect toy bricks to the Create\u00ae 3. We recommend printing at 100% infill. Adding sensors A growing library of brackets for attaching sensors to the Create 3 robot using its 12 mm grid of 3 mm holes is available here . Adding a rear caster Out of the box, Create\u00ae 3 has a center of gravity in front of the two drive wheels and features an integrated front caster to act as a third point of contact. If you add a payload that is heavy and/or causes the robot center of gravity to move behind the drive wheels, you may want to add a second caster wheel in the rear to prevent sliding along the back edge. Below you will find designs for two, 3D-printable solutions which add a second Roomba\u00ae caster wheel to the rear of the Create\u00ae 3. Rear caster attachment The first option is a smaller print (99 x 83 x 58 mm) that attaches to the rear of the Create\u00ae 3 cargo bay. It is faster and simpler to build but protrudes 54 mm behind the rear of the robot, so it may not be suitable for situations were the robot needs to navigate tight spaces or in cluttered environments. The rear caster attachment is held in place between the handle and cable passthrough of the cargo bay using a printed latch and two M3 or #4 self-tapping screws. The Roomba\u00ae caster wheel is inserted into the bottom opening and held in place with a small locking piece which is then screwed into place. If the caster does not rotate freely, sand or file the bearing surface along the caster's axis of rotation. Part Quantity Roomba\u00ae caster wheel 1 Rear caster attachment 1 Caster lock 1 Top latch 1 M3 or #4 self-tapping screw 3 Cargo bay with integrated caster The second option replaces the included Cargo Bay with one that contains an integrated rear caster. It requires a larger print volume (208 x 201 x 66 mm) and slightly reduces the cargo space, but the solution does not protrude beyond the back of the robot. This allows the robot to turn in tight spaces and reduces the likelihood of the caster attachment getting caught on objects in the environment. To assemble, insert the Roomba\u00ae caster wheel through the bottom and hold it in place with the printed caster lock which is secured with an M3 self-tapping screw. Depending on your payload weight and distribution, you may also want to transfer the ballast from the included Create\u00ae 3 cargo bay to this new one. Part Quantity Roomba\u00ae caster wheel 1 Cargo bay with caster 1 Caster lock 1 Ballast and M2.6X6 screw from Create\u00ae 3 Cargo Bay 2 M3 or #4 self-tapping screw 1 Downloadable 3D Model Download this STEP model (17.8 MB) 1 to help design attachments or payloads for Create\u00ae 3. Dimensioned Drawings Top with Faceplate Attached Top with Faceplate Removed Side View Wheel travel is approximately 30 mm. Bottom View Cargo Bay - Top Copyright \u00a9 2021-22 iRobot Corporation. All Rights Reserved. \u21a9","title":"Mechanical"},{"location":"hw/mechanical/#irobot-create-3-mechanical-system","text":"The Create\u00ae 3 is a differential drive robot designed for traversing relatively-flat, indoor environments. The drive wheels feature independent suspensions to help the robot overcome typical carpet or door thresholds.","title":"iRobot\u00ae Create\u00ae 3 Mechanical System"},{"location":"hw/mechanical/#payload","text":"Sensors or accessories can be attached to the faceplate or internal cargo bay, both of which feature a regular 12 mm grid of 3 mm diameter mounting holes. The maximum recommended payload weight (without changing acceleration limits) is 9 kg directly above the center of gravity of the chassis. The robot can handle more weight with reduced acceleration limits or careful management of the load. Notice To prevent damage to the robot or payload, ensure the faceplate and/or payload are well secured to the chassis before use.","title":"Payload"},{"location":"hw/mechanical/#removing-or-attaching-the-faceplate","text":"The faceplate is removed by rotating it on the center axis of the robot using the thumb rests. Four locating pins on the top cover are used to install and retain the faceplate. Notice Always remove the Create\u00ae 3 robot\u2019s faceplate prior to dismantling, adjusting, altering, or affecting the faceplate at the risk of damaging the robot.","title":"Removing or attaching the faceplate"},{"location":"hw/mechanical/#locking-the-faceplate","text":"If you would like to lock the faceplate and prevent it from rotating, you may insert an M3 self-tapping screw or pin in the faceplate hole marked with the image of a screw (while the faceplate is attached).","title":"Locking the faceplate"},{"location":"hw/mechanical/#attachment-tips-and-tricks","text":"","title":"Attachment Tips and Tricks"},{"location":"hw/mechanical/#self-tapping-screws-with-bosses","text":"The Create\u00ae 3 robot's holes are sized for M3 or #4 screws. It is possible to use special self-tapping plastic screws (or in a pinch, sheet metal or wood screws) to screw through the cover into a 3D-printed boss. Many of our example STLs use this technique.","title":"Self-tapping screws with bosses"},{"location":"hw/mechanical/#machine-screws-with-nuts","text":"The Create\u00ae 3 robot's holes are sized for M3 or #4 screws.","title":"Machine screws with nuts"},{"location":"hw/mechanical/#cable-ties","text":"Cable ties (also known as zip ties) can be threaded through the 3 mm holes. 2.5 mm widths are common and fit nicely.","title":"Cable ties"},{"location":"hw/mechanical/#twist-ties","text":"Twist ties are a quick, cheap, and reusable way for holding wires or other non-structural pieces.","title":"Twist ties"},{"location":"hw/mechanical/#plastic-rivets","text":"Push-in, split-shank plastic rivets (either for M3 or 0.115\" holes) are fast and inexpensive ways to mount thin stock to the Create\u00ae 3 robot's faceplate.","title":"Plastic Rivets"},{"location":"hw/mechanical/#highly-sophisticated-interlocking-brick-system","text":"The typical toy brick has its studs spaced at 8 mm, while Create\u00ae 3's holes are spaced at 12 mm. It is possible to place an adapter (576 kB) into every other hole in order to connect toy bricks to the Create\u00ae 3. We recommend printing at 100% infill.","title":"Highly sophisticated interlocking brick system"},{"location":"hw/mechanical/#adding-sensors","text":"A growing library of brackets for attaching sensors to the Create 3 robot using its 12 mm grid of 3 mm holes is available here .","title":"Adding sensors"},{"location":"hw/mechanical/#adding-a-rear-caster","text":"Out of the box, Create\u00ae 3 has a center of gravity in front of the two drive wheels and features an integrated front caster to act as a third point of contact. If you add a payload that is heavy and/or causes the robot center of gravity to move behind the drive wheels, you may want to add a second caster wheel in the rear to prevent sliding along the back edge. Below you will find designs for two, 3D-printable solutions which add a second Roomba\u00ae caster wheel to the rear of the Create\u00ae 3.","title":"Adding a rear caster"},{"location":"hw/mechanical/#rear-caster-attachment","text":"The first option is a smaller print (99 x 83 x 58 mm) that attaches to the rear of the Create\u00ae 3 cargo bay. It is faster and simpler to build but protrudes 54 mm behind the rear of the robot, so it may not be suitable for situations were the robot needs to navigate tight spaces or in cluttered environments. The rear caster attachment is held in place between the handle and cable passthrough of the cargo bay using a printed latch and two M3 or #4 self-tapping screws. The Roomba\u00ae caster wheel is inserted into the bottom opening and held in place with a small locking piece which is then screwed into place. If the caster does not rotate freely, sand or file the bearing surface along the caster's axis of rotation. Part Quantity Roomba\u00ae caster wheel 1 Rear caster attachment 1 Caster lock 1 Top latch 1 M3 or #4 self-tapping screw 3","title":"Rear caster attachment"},{"location":"hw/mechanical/#cargo-bay-with-integrated-caster","text":"The second option replaces the included Cargo Bay with one that contains an integrated rear caster. It requires a larger print volume (208 x 201 x 66 mm) and slightly reduces the cargo space, but the solution does not protrude beyond the back of the robot. This allows the robot to turn in tight spaces and reduces the likelihood of the caster attachment getting caught on objects in the environment. To assemble, insert the Roomba\u00ae caster wheel through the bottom and hold it in place with the printed caster lock which is secured with an M3 self-tapping screw. Depending on your payload weight and distribution, you may also want to transfer the ballast from the included Create\u00ae 3 cargo bay to this new one. Part Quantity Roomba\u00ae caster wheel 1 Cargo bay with caster 1 Caster lock 1 Ballast and M2.6X6 screw from Create\u00ae 3 Cargo Bay 2 M3 or #4 self-tapping screw 1","title":"Cargo bay with integrated caster"},{"location":"hw/mechanical/#downloadable-3d-model","text":"Download this STEP model (17.8 MB) 1 to help design attachments or payloads for Create\u00ae 3.","title":"Downloadable 3D Model"},{"location":"hw/mechanical/#dimensioned-drawings","text":"","title":"Dimensioned Drawings"},{"location":"hw/mechanical/#top-with-faceplate-attached","text":"","title":"Top with Faceplate Attached"},{"location":"hw/mechanical/#top-with-faceplate-removed","text":"","title":"Top with Faceplate Removed"},{"location":"hw/mechanical/#side-view","text":"Wheel travel is approximately 30 mm.","title":"Side View"},{"location":"hw/mechanical/#bottom-view","text":"","title":"Bottom View"},{"location":"hw/mechanical/#cargo-bay-top","text":"Copyright \u00a9 2021-22 iRobot Corporation. All Rights Reserved. \u21a9","title":"Cargo Bay - Top"},{"location":"hw/overview/","text":"iRobot\u00ae Create\u00ae 3 Hardware Overview The Create\u00ae 3 is based on the Roomba\u00ae, a robot vacuum cleaner. Its sensors, actuators, and compact design are capable of navigating and mapping a the whole floor of a home or office space. The robot also ships with an iRobot\u00ae Home Base\u2122 Charging Station. The front of the robot features a multizone bumper with seven pairs of IR proximity sensors, which can be used to detect obstacles. The top of the robot contains three buttons which can all be overloaded by a ROS 2 application (only the \u2022 and \u2022\u2022 buttons can be overloaded in the iRobot Coding app.) The power button features a ring of six RGB LEDs for indication. The faceplate and cargo bay of the robot feature a regular hole pattern for attaching payloads and can be removed without tools for quick prototyping. There are two cable passthroughs: one on the top edge of the cargo bay which is good for quick prototyping and one that penetrates the top cover and faceplate which is useful for keeping wires within the radius of the robot. More information on these features can be found on the Mechanical page. Also visible with the faceplate removed is the adapter board, which is used to interface to external computers either through Bluetooth\u00ae 1 or via USB-C\u00ae 2 . More information on this board is available on the Electrical page. The bottom of the robot includes four cliff sensors to keep the robot on solid ground, a front caster (by default, the robot's center of gravity is forward of the center axis), charging contacts, two wheels with current sensors and encoders, and an optical odometry sensor. Not visible is the robot's IMU, which is used with the optical odometry sensor and wheel encoders to generate a fused odometry estimate. The Bluetooth\u00ae word mark and logos are registered trademarks owned by Bluetooth SIG, Inc. and any use of such marks by iRobot is under license. \u21a9 USB-C\u00ae is a trademark of USB Implementers Forum. \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"Overview"},{"location":"hw/overview/#irobot-create-3-hardware-overview","text":"The Create\u00ae 3 is based on the Roomba\u00ae, a robot vacuum cleaner. Its sensors, actuators, and compact design are capable of navigating and mapping a the whole floor of a home or office space. The robot also ships with an iRobot\u00ae Home Base\u2122 Charging Station. The front of the robot features a multizone bumper with seven pairs of IR proximity sensors, which can be used to detect obstacles. The top of the robot contains three buttons which can all be overloaded by a ROS 2 application (only the \u2022 and \u2022\u2022 buttons can be overloaded in the iRobot Coding app.) The power button features a ring of six RGB LEDs for indication. The faceplate and cargo bay of the robot feature a regular hole pattern for attaching payloads and can be removed without tools for quick prototyping. There are two cable passthroughs: one on the top edge of the cargo bay which is good for quick prototyping and one that penetrates the top cover and faceplate which is useful for keeping wires within the radius of the robot. More information on these features can be found on the Mechanical page. Also visible with the faceplate removed is the adapter board, which is used to interface to external computers either through Bluetooth\u00ae 1 or via USB-C\u00ae 2 . More information on this board is available on the Electrical page. The bottom of the robot includes four cliff sensors to keep the robot on solid ground, a front caster (by default, the robot's center of gravity is forward of the center axis), charging contacts, two wheels with current sensors and encoders, and an optical odometry sensor. Not visible is the robot's IMU, which is used with the optical odometry sensor and wheel encoders to generate a fused odometry estimate. The Bluetooth\u00ae word mark and logos are registered trademarks owned by Bluetooth SIG, Inc. and any use of such marks by iRobot is under license. \u21a9 USB-C\u00ae is a trademark of USB Implementers Forum. \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"iRobot\u00ae Create\u00ae 3 Hardware Overview"},{"location":"releases/g_1_1/","text":"iRobot\u00ae Create\u00ae 3 Release G.1.1 This is the first production Create\u00ae 3 release. This release is running ROS 2 Galactic with the following interface library versions: irobot_create_msgs - 1.2.2 cyclonedds - 0.8.1 Fast-DDS - 2.3.3 Release Overview This release provides the robot's sensors and controls via topics, actions, and services, see ROS 2 API . The robot runs a webserver for updating software, configuring to the network, getting error logs from the robot, and configuring ROS 2 environment variables and parameters. This release has some known issues using the network configuration webserver page to associate with networks using characters that are not alphanumeric 7-bit ASCII. If there is an issue getting on the network, it is recommended to first update the software via the robot's host AP mode, then try getting on the network with the latest version, see Create\u00ae 3 Setup .","title":"G.1.1"},{"location":"releases/g_1_1/#irobot-create-3-release-g11","text":"This is the first production Create\u00ae 3 release.","title":"iRobot\u00ae Create\u00ae 3 Release G.1.1"},{"location":"releases/g_1_1/#this-release-is-running-ros-2-galactic-with-the-following-interface-library-versions","text":"irobot_create_msgs - 1.2.2 cyclonedds - 0.8.1 Fast-DDS - 2.3.3","title":"This release is running ROS 2 Galactic with the following interface library versions:"},{"location":"releases/g_1_1/#release-overview","text":"This release provides the robot's sensors and controls via topics, actions, and services, see ROS 2 API . The robot runs a webserver for updating software, configuring to the network, getting error logs from the robot, and configuring ROS 2 environment variables and parameters. This release has some known issues using the network configuration webserver page to associate with networks using characters that are not alphanumeric 7-bit ASCII. If there is an issue getting on the network, it is recommended to first update the software via the robot's host AP mode, then try getting on the network with the latest version, see Create\u00ae 3 Setup .","title":"Release Overview"},{"location":"releases/g_2_2/","text":"iRobot\u00ae Create\u00ae 3 Release G.2.2 This is the second production Create\u00ae 3 release. This release is running ROS 2 Galactic with the following interface library versions: irobot_create_msgs - 1.2.4 cyclonedds - 0.8.1 Fast-DDS - 2.3.3 Release Overview As with the last release, this one provides the robot's sensors and controls via topics, actions, and services; for more, see ROS 2 API . iRobot\u00ae Education Bluetooth protocol functionality has been greatly improved in this release; we have released the iRobot Education Python Web Playground to interact with the robot. Please be sure your robot's BLE/USB Toggle is in the \"BLE\" position in order to use the robot in this mode. Note that when the Bluetooth 1 radio is enabled, the USB-C 2 port cannot communicate with a downstream device (though it remains powered). Changelog (from G.1.1) Core Robot Webserver Properly handles Unicode characters with SSIDs, hostnames, and Bluetooth names Reboot Robot and Factory Reset are only available in AP mode Added \"Identify Robot\" when in AP mode to assist setting up multiple robots at once MAC addresses are visible on About page User Interface E-Stop and Backup Limit have new LED patterns to disambiguate from other uses of the UI Toggling USB/BLE no longer requires manual application reset from webserver Motion Control Improve reporting and recovery after safety limits are triggered ROS 2 Docking / undocking action improvements and fixes Coordinate system fixes base_link is now 3D base_footprint added as a 2D TF frame imu_link has been removed Advertise light ring brightness parameter Added audio publication and action to make speakers play sound iRobot\u00ae Education Bluetooth protocol mode Fully implement protocol v1.4 Add sound device Add sound on connection and disconnection Advertising rate increased to 10 Hz Changing robot name when connected is now reflected in advertisement Pressing the power button stops all actuators Connection improvements on iOS and Android Many stability improvements Known issues Core Robot Robot may require multiple connection attempts when changing Wi-Fi networks Robot will restart application when its connectivity changes, including connection changes with Wi-Fi or the USB interface, or when it receives a new DHCP lease. This is helpful for autoconfiguration with DDSes but can be disruptive. Robot prefers time sync from Wi-Fi over its USB interface ROS 2 When using CycloneDDS, invoking ROS 2 3 actions causes a memory leak on the robot. When the robot runs out of memory, it will automatically restart the application. Follow this issue for more information. iRobot\u00ae Education Bluetooth protocol mode Robot does not recognize disconnection for thirty seconds. Changing Bluetooth name in the webserver does not modify advertisement name until application is restarted The Bluetooth\u00ae word mark and logos are registered trademarks owned by Bluetooth SIG, Inc. and any use of such marks by iRobot is under license. \u21a9 USB-C\u00ae is a trademark of USB Implementers Forum. \u21a9 ROS 2 is governed by Open Robotics. \u21a9 Python 3 is governed by the Python Software Foundation. \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"G.2.2"},{"location":"releases/g_2_2/#irobot-create-3-release-g22","text":"This is the second production Create\u00ae 3 release.","title":"iRobot\u00ae Create\u00ae 3 Release G.2.2"},{"location":"releases/g_2_2/#this-release-is-running-ros-2-galactic-with-the-following-interface-library-versions","text":"irobot_create_msgs - 1.2.4 cyclonedds - 0.8.1 Fast-DDS - 2.3.3","title":"This release is running ROS 2 Galactic with the following interface library versions:"},{"location":"releases/g_2_2/#release-overview","text":"As with the last release, this one provides the robot's sensors and controls via topics, actions, and services; for more, see ROS 2 API . iRobot\u00ae Education Bluetooth protocol functionality has been greatly improved in this release; we have released the iRobot Education Python Web Playground to interact with the robot. Please be sure your robot's BLE/USB Toggle is in the \"BLE\" position in order to use the robot in this mode. Note that when the Bluetooth 1 radio is enabled, the USB-C 2 port cannot communicate with a downstream device (though it remains powered).","title":"Release Overview"},{"location":"releases/g_2_2/#changelog-from-g11","text":"","title":"Changelog (from G.1.1)"},{"location":"releases/g_2_2/#core-robot","text":"Webserver Properly handles Unicode characters with SSIDs, hostnames, and Bluetooth names Reboot Robot and Factory Reset are only available in AP mode Added \"Identify Robot\" when in AP mode to assist setting up multiple robots at once MAC addresses are visible on About page User Interface E-Stop and Backup Limit have new LED patterns to disambiguate from other uses of the UI Toggling USB/BLE no longer requires manual application reset from webserver Motion Control Improve reporting and recovery after safety limits are triggered","title":"Core Robot"},{"location":"releases/g_2_2/#ros-2","text":"Docking / undocking action improvements and fixes Coordinate system fixes base_link is now 3D base_footprint added as a 2D TF frame imu_link has been removed Advertise light ring brightness parameter Added audio publication and action to make speakers play sound","title":"ROS 2"},{"location":"releases/g_2_2/#irobot-education-bluetooth-protocol-mode","text":"Fully implement protocol v1.4 Add sound device Add sound on connection and disconnection Advertising rate increased to 10 Hz Changing robot name when connected is now reflected in advertisement Pressing the power button stops all actuators Connection improvements on iOS and Android Many stability improvements","title":"iRobot\u00ae Education Bluetooth protocol mode"},{"location":"releases/g_2_2/#known-issues","text":"","title":"Known issues"},{"location":"releases/g_2_2/#core-robot_1","text":"Robot may require multiple connection attempts when changing Wi-Fi networks Robot will restart application when its connectivity changes, including connection changes with Wi-Fi or the USB interface, or when it receives a new DHCP lease. This is helpful for autoconfiguration with DDSes but can be disruptive. Robot prefers time sync from Wi-Fi over its USB interface","title":"Core Robot"},{"location":"releases/g_2_2/#ros-2_1","text":"When using CycloneDDS, invoking ROS 2 3 actions causes a memory leak on the robot. When the robot runs out of memory, it will automatically restart the application. Follow this issue for more information.","title":"ROS 2"},{"location":"releases/g_2_2/#irobot-education-bluetooth-protocol-mode_1","text":"Robot does not recognize disconnection for thirty seconds. Changing Bluetooth name in the webserver does not modify advertisement name until application is restarted The Bluetooth\u00ae word mark and logos are registered trademarks owned by Bluetooth SIG, Inc. and any use of such marks by iRobot is under license. \u21a9 USB-C\u00ae is a trademark of USB Implementers Forum. \u21a9 ROS 2 is governed by Open Robotics. \u21a9 Python 3 is governed by the Python Software Foundation. \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"iRobot\u00ae Education Bluetooth protocol mode"},{"location":"releases/overview/","text":"iRobot\u00ae Create\u00ae 3 Releases Overview Create\u00ae 3 releases take the version schema <ROS 2 letter>.<major number>.<minor number> The letter corresponds with the ROS 2 Release. For example, G corresponds with the Galactic release, H will correspond with Humble. See ROS 2 Releases . The first number corresponds with a major release number within the ROS 2 letter release. Increments to major release imply API breaking changes or significant new features. The second number corresponds with a minor release number within the major release number. Increments to the minor release imply bug fixes or small feature additions that should be backwards compatible with code that currently integrates with the major release number. The latest release can be found at: http://edu.irobot.com/create3-latest-fw Releases G.2.2 (latest) G.1.1","title":"Overview"},{"location":"releases/overview/#irobot-create-3-releases","text":"","title":"iRobot\u00ae Create\u00ae 3 Releases"},{"location":"releases/overview/#overview","text":"Create\u00ae 3 releases take the version schema <ROS 2 letter>.<major number>.<minor number> The letter corresponds with the ROS 2 Release. For example, G corresponds with the Galactic release, H will correspond with Humble. See ROS 2 Releases . The first number corresponds with a major release number within the ROS 2 letter release. Increments to major release imply API breaking changes or significant new features. The second number corresponds with a minor release number within the major release number. Increments to the minor release imply bug fixes or small feature additions that should be backwards compatible with code that currently integrates with the major release number. The latest release can be found at: http://edu.irobot.com/create3-latest-fw","title":"Overview"},{"location":"releases/overview/#releases","text":"G.2.2 (latest) G.1.1","title":"Releases"},{"location":"setup/compute-ntp/","text":"Setup NTP on compute board to serve time to Create\u00ae 3 Why should I do this? ROS 2 1 is dependent upon synchronized clocks between nodes to have all data in the same reference time. When the Create\u00ae 3 is publishing on topics, it is publishing its data with the timestamp of its system clock, which synchronizes with an NTP server. If the Create\u00ae 3's Wi-Fi is connected to a network with internet connection, it will sync to a global time NTP server. The Create\u00ae 3 NTP config is also set to listen for servers on USB IP address 192.168.186.1 and 192.168.186.3. If the compute board is connected over USB to the Create\u00ae 3 with the compute board assigned one of these IP addresses on its USB interface, NTP on the compute board can keep the clocks between the compute board and Create\u00ae 3 in sync, even without an internet connection. If there is an internet connection on both compute board and Create\u00ae 3, configuring the NTP server on the compute board to serve the Create\u00ae 3 can still add value by reducing jitter between clocks. If your Create\u00ae 3 and compute board have an internet connection, this is not required, but is still recommended. Step-by-step On your Compute Board, install chrony NTP server package sudo apt install chrony Edit the config file sudo vi /etc/chrony/chrony.conf Add the following lines after the pool #.ubuntu.pool.ntp.org iburst maxsources # block server 192.168.186.2 presend 0 minpoll 0 maxpoll 0 iburst prefer trust # Enable serving time to ntp clients on 192.168.186.0 subnet. allow 192.168.186.0/24 Optionally add the following lines immediately afterward if your SBC will not have a connection to a reference clock (i.e., the Internet) # Serve time even if not synchronized to a time source local stratum 10 Restart chrony sudo service chrony restart Verify compute NTP server is talking to the Create\u00ae 3 sudo chronyc clients Confirm 192.168.182.2 shows non 0 number in NTP column Hostname NTP Drop Int IntL Last Cmd Drop Int Last =============================================================================== 192.168.186.2 51 0 5 - 32 0 0 - - localhost 0 0 - - - 31 0 7 4 Note that if there is a large jump in the time, the Create\u00ae 3 may not accept it until its next reboot. This can be verified by checking the Create\u00ae 3 robot's log for a line like user.notice ntpd: ntpd: reply from 192.168.186.3: delay ### is too high, ignoring If this happens, simply restart the robot (not just the application) via the webserver over the USB network connection. ROS 2 is governed by Open Robotics \u21a9","title":"NTP on Compute Board"},{"location":"setup/compute-ntp/#setup-ntp-on-compute-board-to-serve-time-to-create-3","text":"","title":"Setup NTP on compute board to serve time to Create\u00ae 3"},{"location":"setup/compute-ntp/#why-should-i-do-this","text":"ROS 2 1 is dependent upon synchronized clocks between nodes to have all data in the same reference time. When the Create\u00ae 3 is publishing on topics, it is publishing its data with the timestamp of its system clock, which synchronizes with an NTP server. If the Create\u00ae 3's Wi-Fi is connected to a network with internet connection, it will sync to a global time NTP server. The Create\u00ae 3 NTP config is also set to listen for servers on USB IP address 192.168.186.1 and 192.168.186.3. If the compute board is connected over USB to the Create\u00ae 3 with the compute board assigned one of these IP addresses on its USB interface, NTP on the compute board can keep the clocks between the compute board and Create\u00ae 3 in sync, even without an internet connection. If there is an internet connection on both compute board and Create\u00ae 3, configuring the NTP server on the compute board to serve the Create\u00ae 3 can still add value by reducing jitter between clocks. If your Create\u00ae 3 and compute board have an internet connection, this is not required, but is still recommended.","title":"Why should I do this?"},{"location":"setup/compute-ntp/#step-by-step","text":"On your Compute Board, install chrony NTP server package sudo apt install chrony Edit the config file sudo vi /etc/chrony/chrony.conf Add the following lines after the pool #.ubuntu.pool.ntp.org iburst maxsources # block server 192.168.186.2 presend 0 minpoll 0 maxpoll 0 iburst prefer trust # Enable serving time to ntp clients on 192.168.186.0 subnet. allow 192.168.186.0/24 Optionally add the following lines immediately afterward if your SBC will not have a connection to a reference clock (i.e., the Internet) # Serve time even if not synchronized to a time source local stratum 10 Restart chrony sudo service chrony restart Verify compute NTP server is talking to the Create\u00ae 3 sudo chronyc clients Confirm 192.168.182.2 shows non 0 number in NTP column Hostname NTP Drop Int IntL Last Cmd Drop Int Last =============================================================================== 192.168.186.2 51 0 5 - 32 0 0 - - localhost 0 0 - - - 31 0 7 4 Note that if there is a large jump in the time, the Create\u00ae 3 may not accept it until its next reboot. This can be verified by checking the Create\u00ae 3 robot's log for a line like user.notice ntpd: ntpd: reply from 192.168.186.3: delay ### is too high, ignoring If this happens, simply restart the robot (not just the application) via the webserver over the USB network connection. ROS 2 is governed by Open Robotics \u21a9","title":"Step-by-step"},{"location":"setup/jetson/","text":"Connect Create\u00ae 3 to NVIDIA\u00ae Jetson\u2122 and set up ROS 2 Galactic Important This is community-submitted content. Please feel welcome to submit PRs for additions or corrections. Before you start Attention These directions are written for someone with experience with embedded Linux and basic embedded computers. It is highly recommended to read through the getting started document for your NVIDIA\u00ae Jetson\u2122 developer kit before beginning: Getting Started With Jetson Xavier NX Developer Kit Getting Started with Jetson Nano Developer Kit Getting Started with Jetson Nano 2GB Developer Kit Step-by-step Getting Started Guide portion Download the SD card image for your Jetson platform and write onto a microSD card. Complete the getting started guide (listed above) until you complete the initial setup. Alter \"USB Device Mode\" to apply static IP To alter the Jetson's \"USB Device Mode\" feature (specifically, disabling DHCP server and self-assign a static IP address); First, create a flag file to store IP address for Jetson to be used with Create3. sudo bash -c 'echo \"192.168.186.3\" > /opt/nvidia/l4t-usb-device-mode/IP_ADDRESS_FOR_CREATE3_ROBOT.conf' Then, modify the \"nv-l4t-device-mode-runtime\" service script ( /opt/nvidia/l4t-usb-device-mode/nv-l4t-usb-device-mode-runtime-start.sh ). The complete file is here . Connect micro-B end of the USB cable from Create\u00ae 3 robot to the micro-B USB port of Jetson. Then check if the static IP address is set by issuing ifconfig command. $ ifconfig l4tbr0 l4tbr0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 192.168.186.3 netmask 255.255.255.0 broadcast 192.168.186.255 inet6 fe80::1 prefixlen 128 scopeid 0x20<link> inet6 fe80::ecb6:edff:feac:7dd5 prefixlen 64 scopeid 0x20<link> ether ee:b6:ed:ac:7d:d5 txqueuelen 1000 (Ethernet) RX packets 169 bytes 36206 (36.2 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 1644 bytes 213306 (213.3 KB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 Warning Be sure that the USB/BLE toggle on the robot's adapter board is set to the USB position. Note If you ever want to stop using the Jetson device for Create\u00ae 3 and re-enable the original USB Device Mode feature (so that you can connect to your Windows PC in headless style), you can simply remove the flag file, or execute the following. sudo mv /opt/nvidia/l4t-usb-device-mode/IP_ADDRESS_FOR_CREATE3_ROBOT.conf /opt/nvidia/l4t-usb-device-mode/IP_ADDRESS_FOR_CREATE3_ROBOT.conf.bak Start ROS 2 Galactic container The recommended way to run ROS2 on Jetson is to use pre-built Docker container images. Enable NVIDIA Container Runtime with Docker integration, if this is the first time running containers on Jetson, to allow access to GPU from containers. Edit /etc/docker/daemon.json to be the following. { \"runtimes\": { \"nvidia\": { \"path\": \"/usr/bin/nvidia-container-runtime\", \"runtimeArgs\": [] } }, \"default-runtime\": \"nvidia\" } Use jetson-containers ' script to simplify the invocation of docker run command. git clone https://github.com/dusty-nv/jetson-containers/ cd jetson-containers scripts/docker_run.sh -c dustynv/ros:galactic-ros-base-l4t-r32.6.1 Set the default network interface by setting Cyclone DDS configuration. export CYCLONEDDS_URI='<CycloneDDS><Domain><General><NetworkInterfaceAddress>l4tbr0</NetworkInterfaceAddress></General></Domain></CycloneDDS>' Attention If you are using CycloneDDS (Galactic default) and want the Jetson to talk to the robot over USB and a laptop via Wi-Fi, you will need to take extra steps to setup CycloneDDS to use multiple interfaces. You will need to create a CycloneDDS XML configuration file with both USB and Wi-Fi interfaces and then set the CYCLONEDDS_URI environment variable to its path. See CycloneDDS Multiple Network Interfaces . Note the differences in Jetson USB and Wi-Fi interface names from the documentation. Check to ensure Create\u00ae 3 topics appear ros2 topic list You should get /battery_state /cmd_audio /cmd_lightring /cmd_vel /dock /hazard_detection /imu /interface_buttons /ir_intensity /ir_opcode /kidnap_status /mouse /odom /parameter_events /rosout /slip_status /stop_status /tf /tf_static /wheel_status /wheel_ticks /wheel_vels Check if it read a message on a topic ros2 topic echo odom You should see continuous repetition of output like following. --- header: stamp: sec: 1639388519 nanosec: 209038110 frame_id: odom child_frame_id: base_link pose: pose: position: x: -0.04380033165216446 y: -0.005811699666082859 z: 0.0 orientation: x: 0.0037933308631181717 y: 0.0016814800910651684 z: 0.03521127253770828 w: 0.999371349811554 covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] twist: twist: linear: x: 0.0 y: 4.972387477511303e-07 z: -5.194771269447518e-09 angular: x: -0.0006566781590969611 y: -0.0019107190640370627 z: 0.0 covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]","title":"ROS 2 on an NVIDIA Jetson"},{"location":"setup/jetson/#connect-create-3-to-nvidia-jetsontm-and-set-up-ros-2-galactic","text":"Important This is community-submitted content. Please feel welcome to submit PRs for additions or corrections.","title":"Connect Create\u00ae 3 to NVIDIA\u00ae Jetson\u2122 and set up ROS 2 Galactic"},{"location":"setup/jetson/#before-you-start","text":"Attention These directions are written for someone with experience with embedded Linux and basic embedded computers. It is highly recommended to read through the getting started document for your NVIDIA\u00ae Jetson\u2122 developer kit before beginning: Getting Started With Jetson Xavier NX Developer Kit Getting Started with Jetson Nano Developer Kit Getting Started with Jetson Nano 2GB Developer Kit","title":"Before you start"},{"location":"setup/jetson/#step-by-step","text":"","title":"Step-by-step"},{"location":"setup/jetson/#getting-started-guide-portion","text":"Download the SD card image for your Jetson platform and write onto a microSD card. Complete the getting started guide (listed above) until you complete the initial setup.","title":"Getting Started Guide portion"},{"location":"setup/jetson/#alter-usb-device-mode-to-apply-static-ip","text":"To alter the Jetson's \"USB Device Mode\" feature (specifically, disabling DHCP server and self-assign a static IP address); First, create a flag file to store IP address for Jetson to be used with Create3. sudo bash -c 'echo \"192.168.186.3\" > /opt/nvidia/l4t-usb-device-mode/IP_ADDRESS_FOR_CREATE3_ROBOT.conf' Then, modify the \"nv-l4t-device-mode-runtime\" service script ( /opt/nvidia/l4t-usb-device-mode/nv-l4t-usb-device-mode-runtime-start.sh ). The complete file is here . Connect micro-B end of the USB cable from Create\u00ae 3 robot to the micro-B USB port of Jetson. Then check if the static IP address is set by issuing ifconfig command. $ ifconfig l4tbr0 l4tbr0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 192.168.186.3 netmask 255.255.255.0 broadcast 192.168.186.255 inet6 fe80::1 prefixlen 128 scopeid 0x20<link> inet6 fe80::ecb6:edff:feac:7dd5 prefixlen 64 scopeid 0x20<link> ether ee:b6:ed:ac:7d:d5 txqueuelen 1000 (Ethernet) RX packets 169 bytes 36206 (36.2 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 1644 bytes 213306 (213.3 KB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 Warning Be sure that the USB/BLE toggle on the robot's adapter board is set to the USB position. Note If you ever want to stop using the Jetson device for Create\u00ae 3 and re-enable the original USB Device Mode feature (so that you can connect to your Windows PC in headless style), you can simply remove the flag file, or execute the following. sudo mv /opt/nvidia/l4t-usb-device-mode/IP_ADDRESS_FOR_CREATE3_ROBOT.conf /opt/nvidia/l4t-usb-device-mode/IP_ADDRESS_FOR_CREATE3_ROBOT.conf.bak","title":"Alter \"USB Device Mode\" to apply static IP"},{"location":"setup/jetson/#start-ros-2-galactic-container","text":"The recommended way to run ROS2 on Jetson is to use pre-built Docker container images. Enable NVIDIA Container Runtime with Docker integration, if this is the first time running containers on Jetson, to allow access to GPU from containers. Edit /etc/docker/daemon.json to be the following. { \"runtimes\": { \"nvidia\": { \"path\": \"/usr/bin/nvidia-container-runtime\", \"runtimeArgs\": [] } }, \"default-runtime\": \"nvidia\" } Use jetson-containers ' script to simplify the invocation of docker run command. git clone https://github.com/dusty-nv/jetson-containers/ cd jetson-containers scripts/docker_run.sh -c dustynv/ros:galactic-ros-base-l4t-r32.6.1 Set the default network interface by setting Cyclone DDS configuration. export CYCLONEDDS_URI='<CycloneDDS><Domain><General><NetworkInterfaceAddress>l4tbr0</NetworkInterfaceAddress></General></Domain></CycloneDDS>' Attention If you are using CycloneDDS (Galactic default) and want the Jetson to talk to the robot over USB and a laptop via Wi-Fi, you will need to take extra steps to setup CycloneDDS to use multiple interfaces. You will need to create a CycloneDDS XML configuration file with both USB and Wi-Fi interfaces and then set the CYCLONEDDS_URI environment variable to its path. See CycloneDDS Multiple Network Interfaces . Note the differences in Jetson USB and Wi-Fi interface names from the documentation. Check to ensure Create\u00ae 3 topics appear ros2 topic list You should get /battery_state /cmd_audio /cmd_lightring /cmd_vel /dock /hazard_detection /imu /interface_buttons /ir_intensity /ir_opcode /kidnap_status /mouse /odom /parameter_events /rosout /slip_status /stop_status /tf /tf_static /wheel_status /wheel_ticks /wheel_vels Check if it read a message on a topic ros2 topic echo odom You should see continuous repetition of output like following. --- header: stamp: sec: 1639388519 nanosec: 209038110 frame_id: odom child_frame_id: base_link pose: pose: position: x: -0.04380033165216446 y: -0.005811699666082859 z: 0.0 orientation: x: 0.0037933308631181717 y: 0.0016814800910651684 z: 0.03521127253770828 w: 0.999371349811554 covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] twist: twist: linear: x: 0.0 y: 4.972387477511303e-07 z: -5.194771269447518e-09 angular: x: -0.0006566781590969611 y: -0.0019107190640370627 z: 0.0 covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]","title":"Start ROS 2 Galactic container"},{"location":"setup/multi-robot/","text":"Using multiple Create\u00ae 3 robots This page describes how to manage multiple Create\u00ae 3 robots connected to the same Wi-Fi network. Note that if you have multiple robots, but they are not on the same network, then you can ignore this as they are effectively isolated. Attention If you have multiple Create\u00ae 3 robots connected to the same Wi-Fi network it is required to adopt at least one of the following procedures; otherwise, they will not work. Basic Concepts on ROS 2 Communication ROS 2 1 communication is based on the underlying DDS middleware. After two ROS processes discover each other, they will automatically start to communicate if their topics, services, or actions match. The default discovery protocol used by ROS 2 is based on broadcast. This means that when a ROS 2 process is started it will advertise its own discovery messages to all other ROS processes that are connected to the same network. The main advantage of using a broadcast discovery protocol is that as long as your ROS 2 processes are connected to the same network, they will automatically connect to each other and start to communicate. The basic use case does not require any special configuration from the user. Potential Problems with Multiple Robots Having ROS 2 processes automatically start communication is not always a good thing. Usually if two ROS 2 processes that are meant to be executed in isolation start communicating, they will end up mixing up messages between processes without being able to understand if what they are receiving was meant for them or for the other process (or in this case, robot). Important Create\u00ae 3 robots should never communicate with each other. There may be cases where two ROS 2 processes internal to a robot have no intention to communicate, but happen to do so since they have the same topic names and just happen to be under the same network. On the other hand, users with multiple robots running at the same time may want to be able to select to which robot to communicate from their laptop, while still preventing them to communicate between each other. The following sections will describe how to mitigate and solve these problems. Different solutions are presented, as each is suitable for different scenarios. ROS 2 Namespaces The easiest way to prevent multiple ROS 2 processes from communicating with each other is to use ROS 2 namespaces. As you may know, each ROS 2 entity is uniquely identified by its name (for example the topic named cmd_vel is used to control the robot). By specifying a namespace for a ROS 2 process you are effectively pre-pending a word in front of the name of all the entities created by it. The ROS 2 namespace can be set from the Application \u2192 Configuration menu in the Create\u00ae 3 robot's web server. Note that the namespace name must start with a slash / . If you have two robots and you specify the following namespaces: /robot_1 and /robot_2 you will then be able to see their individual topics well-separated: $ ros2 topic list /robot_1/cmd_vel /robot_1/dock /robot_1/odom ... /robot_2/cmd_vel /robot_2/dock /robot_2/odom ... Note that if you want to publish or subscribe to a specific topic, now you have to prepend the appropriate namespace in front of it. For example: $ ros2 topic echo /robot_1/odom Using a custom ROS 2 namespace for your robots is the recommended solution if you don't have too many robots or if you have an additional application that needs to communicate with all of them at the same time. ROS 2 Domain IDs A different approach for isolating multiple ROS 2 processes consists in specifying the ROS_DOMAIN_ID environment variable. If two processes use a different ROS_DOMAIN_ID value they will be completely isolated from each other, which means that they will not only avoid communication, but they also will not be able to discover each other. You can read more details about this variable in the ROS 2 official documentation . The ROS 2 domain ID can be set from the Application \u2192 Configuration menu in the Create\u00ae 3 robot's web server. Note that the domain ID must be a value between 0 and 101. By default, ROS 2 processes use a ROS_DOMAIN_ID value of 0. If you want to communicate with a specific robot from your laptop, it is required to set the corresponding value for the domain ID. For example: $ export ROS_DOMAIN_ID=42 $ ros2 topic list /cmd_vel /dock /odom ... Note that a ROS 2 process can only use one domain ID at a time. If needed you can always have multiple robots under the same domain ID and then also add namespaces to prevent them from communicating. Using a custom ROS 2 domain ID for your robots is the recommended solution when you have a large number of robots and you want your tools to communicate only with a subset of them. ROS 2 is governed by Open Robotics \u21a9","title":"Multi-Robot Setup"},{"location":"setup/multi-robot/#using-multiple-create-3-robots","text":"This page describes how to manage multiple Create\u00ae 3 robots connected to the same Wi-Fi network. Note that if you have multiple robots, but they are not on the same network, then you can ignore this as they are effectively isolated. Attention If you have multiple Create\u00ae 3 robots connected to the same Wi-Fi network it is required to adopt at least one of the following procedures; otherwise, they will not work.","title":"Using multiple Create\u00ae 3 robots"},{"location":"setup/multi-robot/#basic-concepts-on-ros-2-communication","text":"ROS 2 1 communication is based on the underlying DDS middleware. After two ROS processes discover each other, they will automatically start to communicate if their topics, services, or actions match. The default discovery protocol used by ROS 2 is based on broadcast. This means that when a ROS 2 process is started it will advertise its own discovery messages to all other ROS processes that are connected to the same network. The main advantage of using a broadcast discovery protocol is that as long as your ROS 2 processes are connected to the same network, they will automatically connect to each other and start to communicate. The basic use case does not require any special configuration from the user.","title":"Basic Concepts on ROS 2 Communication"},{"location":"setup/multi-robot/#potential-problems-with-multiple-robots","text":"Having ROS 2 processes automatically start communication is not always a good thing. Usually if two ROS 2 processes that are meant to be executed in isolation start communicating, they will end up mixing up messages between processes without being able to understand if what they are receiving was meant for them or for the other process (or in this case, robot). Important Create\u00ae 3 robots should never communicate with each other. There may be cases where two ROS 2 processes internal to a robot have no intention to communicate, but happen to do so since they have the same topic names and just happen to be under the same network. On the other hand, users with multiple robots running at the same time may want to be able to select to which robot to communicate from their laptop, while still preventing them to communicate between each other. The following sections will describe how to mitigate and solve these problems. Different solutions are presented, as each is suitable for different scenarios.","title":"Potential Problems with Multiple Robots"},{"location":"setup/multi-robot/#ros-2-namespaces","text":"The easiest way to prevent multiple ROS 2 processes from communicating with each other is to use ROS 2 namespaces. As you may know, each ROS 2 entity is uniquely identified by its name (for example the topic named cmd_vel is used to control the robot). By specifying a namespace for a ROS 2 process you are effectively pre-pending a word in front of the name of all the entities created by it. The ROS 2 namespace can be set from the Application \u2192 Configuration menu in the Create\u00ae 3 robot's web server. Note that the namespace name must start with a slash / . If you have two robots and you specify the following namespaces: /robot_1 and /robot_2 you will then be able to see their individual topics well-separated: $ ros2 topic list /robot_1/cmd_vel /robot_1/dock /robot_1/odom ... /robot_2/cmd_vel /robot_2/dock /robot_2/odom ... Note that if you want to publish or subscribe to a specific topic, now you have to prepend the appropriate namespace in front of it. For example: $ ros2 topic echo /robot_1/odom Using a custom ROS 2 namespace for your robots is the recommended solution if you don't have too many robots or if you have an additional application that needs to communicate with all of them at the same time.","title":"ROS 2 Namespaces"},{"location":"setup/multi-robot/#ros-2-domain-ids","text":"A different approach for isolating multiple ROS 2 processes consists in specifying the ROS_DOMAIN_ID environment variable. If two processes use a different ROS_DOMAIN_ID value they will be completely isolated from each other, which means that they will not only avoid communication, but they also will not be able to discover each other. You can read more details about this variable in the ROS 2 official documentation . The ROS 2 domain ID can be set from the Application \u2192 Configuration menu in the Create\u00ae 3 robot's web server. Note that the domain ID must be a value between 0 and 101. By default, ROS 2 processes use a ROS_DOMAIN_ID value of 0. If you want to communicate with a specific robot from your laptop, it is required to set the corresponding value for the domain ID. For example: $ export ROS_DOMAIN_ID=42 $ ros2 topic list /cmd_vel /dock /odom ... Note that a ROS 2 process can only use one domain ID at a time. If needed you can always have multiple robots under the same domain ID and then also add namespaces to prevent them from communicating. Using a custom ROS 2 domain ID for your robots is the recommended solution when you have a large number of robots and you want your tools to communicate only with a subset of them. ROS 2 is governed by Open Robotics \u21a9","title":"ROS 2 Domain IDs"},{"location":"setup/pi4/","text":"Connect Create\u00ae 3 to Raspberry Pi\u00ae 4 and set up ROS 2 Galactic Before you start Attention These directions are written for someone with experience with embedded Linux and basic embedded computers. It is highly recommended to read through the following documents before beginning: How to install Ubuntu Server on your Raspberry Pi 1 - official Canonical documentation Installing ROS 2 on Ubuntu Linux 1 - official Open Robotics documentation Step-by-step Download Ubuntu\u00ae Server 20.04 64-bit 1 and write onto a microSD card. In the system-boot partition, edit usercfg.txt and add dtoverlay=dwc2,dr_mode=peripheral . For convenience, here's a copy of this file . In the system-boot partition, edit cmdline.txt to add modules-load=dwc2,g_ether after rootwait . For convenience, here's a copy of this file . In the system-boot partition, edit network-config to optionally add information about your Wi-Fi connection, and also add the following under ethernets usb0: dhcp4: false optional: true addresses: [192.168.186.3/24] For convenience, here's a copy of this file . Be sure to remove the .txt extension. Note that the robot uses the default IP address of 192.168.186.2 on its usb0 interface. Please note also that after initial boot, editing network-config in the boot partition will not do anything; instead, the file to edit can be found at /etc/netplan/50-cloud-init.yaml . If you would like your Raspberry Pi\u00ae 4 3 to communicate with the Create\u00ae 3 over its USB-C\u00ae 2 port (and not just to power it), be sure that the USB/BLE toggle on the robot's adapter board is set to the USB position. Insert the microSD card into the Raspberry Pi\u00ae 4 3 , and then use a USB-C\u00ae 2 to USB-C\u00ae 2 cable to connect the Raspberry Pi\u00ae 4 3 to the Create\u00ae 3. A photo of this connection can be found here . The first boot may take a few minutes. (It may help to have a monitor and keyboard set up in case of any trouble on the first boot.) Log in with the default username and password (ubuntu/ubuntu), change your password, and then change your locale to be one that uses UTF-8. For example, in the US, type sudo apt update sudo apt install locales sudo locale-gen en_US en_US.UTF-8 sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 export LANG=en_US.UTF-8 Then, execute the following blocks of commands to install ROS 2 4 : sudo apt update && sudo apt install -y curl gnupg2 lsb-release build-essential git cmake then sudo curl -ksSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null sudo apt update && sudo apt install -y ros-galactic-ros-base python3-colcon-common-extensions python3-rosdep ros-galactic-rmw-fastrtps-cpp ros-galactic-rmw-cyclonedds-cpp ros-galactic-irobot-create-msgs finally echo \"source /usr/share/colcon_cd/function/colcon_cd.sh\" >> ~/.bashrc echo \"export _colcon_cd_root=/opt/ros/galactic/\" >> ~/.bashrc echo \"source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash\" >> ~/.bashrc echo \"source /opt/ros/galactic/setup.bash\" >> ~/.bashrc At this point, we recommend setting your default RMW. The RMW you set here has to match the RMW on your robot, which can be found from its Application Configuration page. More detail on RMW can be found here . Right now, the Create\u00ae 3 robot supports rmw_cyclonedds_cpp and rmw_fastrtps_cpp . The default for Galactic is rmw_cyclonedds_cpp . Depending on your robot's RMW implementation, type one of the following: echo \"export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\" >> ~/.bashrc or echo \"export RMW_IMPLEMENTATION=rmw_fastrtps_cpp\" >> ~/.bashrc Log out and log back in. Once you do, test things out with a ros2 topic list . A full Create\u00ae 3 API description can be found here . Attention If you are using CycloneDDS (Galactic default), your Raspberry Pi\u00ae may be running with multiple network interfaces (usb0 to talk to robot and wlan0 to talk to laptop). You will need to export a path on the Raspberry Pi\u00ae to an xml config file that registers those interfaces in the CYCLONEDDS_URI. See CycloneDDS Multiple Network Interfaces . Ubuntu is a registered trademark of Canonical Ltd. \u21a9 \u21a9 \u21a9 USB-C\u00ae is a trademark of USB Implementers Forum. \u21a9 \u21a9 \u21a9 Raspberry Pi\u00ae is a trademark of Raspberry Pi Trading. All other trademarks mentioned are the property of their respective owners. \u21a9 \u21a9 \u21a9 ROS 2 is governed by Open Robotics \u21a9","title":"ROS 2 on a Pi 4"},{"location":"setup/pi4/#connect-create-3-to-raspberry-pi-4-and-set-up-ros-2-galactic","text":"","title":"Connect Create\u00ae 3 to Raspberry Pi\u00ae 4 and set up ROS 2 Galactic"},{"location":"setup/pi4/#before-you-start","text":"Attention These directions are written for someone with experience with embedded Linux and basic embedded computers. It is highly recommended to read through the following documents before beginning: How to install Ubuntu Server on your Raspberry Pi 1 - official Canonical documentation Installing ROS 2 on Ubuntu Linux 1 - official Open Robotics documentation","title":"Before you start"},{"location":"setup/pi4/#step-by-step","text":"Download Ubuntu\u00ae Server 20.04 64-bit 1 and write onto a microSD card. In the system-boot partition, edit usercfg.txt and add dtoverlay=dwc2,dr_mode=peripheral . For convenience, here's a copy of this file . In the system-boot partition, edit cmdline.txt to add modules-load=dwc2,g_ether after rootwait . For convenience, here's a copy of this file . In the system-boot partition, edit network-config to optionally add information about your Wi-Fi connection, and also add the following under ethernets usb0: dhcp4: false optional: true addresses: [192.168.186.3/24] For convenience, here's a copy of this file . Be sure to remove the .txt extension. Note that the robot uses the default IP address of 192.168.186.2 on its usb0 interface. Please note also that after initial boot, editing network-config in the boot partition will not do anything; instead, the file to edit can be found at /etc/netplan/50-cloud-init.yaml . If you would like your Raspberry Pi\u00ae 4 3 to communicate with the Create\u00ae 3 over its USB-C\u00ae 2 port (and not just to power it), be sure that the USB/BLE toggle on the robot's adapter board is set to the USB position. Insert the microSD card into the Raspberry Pi\u00ae 4 3 , and then use a USB-C\u00ae 2 to USB-C\u00ae 2 cable to connect the Raspberry Pi\u00ae 4 3 to the Create\u00ae 3. A photo of this connection can be found here . The first boot may take a few minutes. (It may help to have a monitor and keyboard set up in case of any trouble on the first boot.) Log in with the default username and password (ubuntu/ubuntu), change your password, and then change your locale to be one that uses UTF-8. For example, in the US, type sudo apt update sudo apt install locales sudo locale-gen en_US en_US.UTF-8 sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 export LANG=en_US.UTF-8 Then, execute the following blocks of commands to install ROS 2 4 : sudo apt update && sudo apt install -y curl gnupg2 lsb-release build-essential git cmake then sudo curl -ksSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null sudo apt update && sudo apt install -y ros-galactic-ros-base python3-colcon-common-extensions python3-rosdep ros-galactic-rmw-fastrtps-cpp ros-galactic-rmw-cyclonedds-cpp ros-galactic-irobot-create-msgs finally echo \"source /usr/share/colcon_cd/function/colcon_cd.sh\" >> ~/.bashrc echo \"export _colcon_cd_root=/opt/ros/galactic/\" >> ~/.bashrc echo \"source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash\" >> ~/.bashrc echo \"source /opt/ros/galactic/setup.bash\" >> ~/.bashrc At this point, we recommend setting your default RMW. The RMW you set here has to match the RMW on your robot, which can be found from its Application Configuration page. More detail on RMW can be found here . Right now, the Create\u00ae 3 robot supports rmw_cyclonedds_cpp and rmw_fastrtps_cpp . The default for Galactic is rmw_cyclonedds_cpp . Depending on your robot's RMW implementation, type one of the following: echo \"export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\" >> ~/.bashrc or echo \"export RMW_IMPLEMENTATION=rmw_fastrtps_cpp\" >> ~/.bashrc Log out and log back in. Once you do, test things out with a ros2 topic list . A full Create\u00ae 3 API description can be found here . Attention If you are using CycloneDDS (Galactic default), your Raspberry Pi\u00ae may be running with multiple network interfaces (usb0 to talk to robot and wlan0 to talk to laptop). You will need to export a path on the Raspberry Pi\u00ae to an xml config file that registers those interfaces in the CYCLONEDDS_URI. See CycloneDDS Multiple Network Interfaces . Ubuntu is a registered trademark of Canonical Ltd. \u21a9 \u21a9 \u21a9 USB-C\u00ae is a trademark of USB Implementers Forum. \u21a9 \u21a9 \u21a9 Raspberry Pi\u00ae is a trademark of Raspberry Pi Trading. All other trademarks mentioned are the property of their respective owners. \u21a9 \u21a9 \u21a9 ROS 2 is governed by Open Robotics \u21a9","title":"Step-by-step"},{"location":"setup/provision/","text":"Connect Create\u00ae 3 to Wi-Fi The Basics Follow the main guide for getting started here . Select RMW Implementation If you are planning to use ROS 2 1 , make sure you have selected the matching RMW implementation as the rest of the nodes in your system. This can be found in the Application \u2192 Configuration menu in the Create\u00ae 3 robot's web server, shown in the below image. The default RMW for ROS 2 Galactic is Cyclone DDS. Be sure to click \"save\" after making any changes, and then restart the application. Attention As of Create 3 software version G.2.2, there is a memory leak in Cyclone DDS that can cause the robot to reboot after a few hours of use. Please monitor this issue for further information. Fast-DDS does not have this problem. See ROS 2 Network Config for more information about RMW specific choices and configuration requirements. A detailed rundown of the features of the robot webserver can be found on the Application page. Using Multiple Robots Important If you plan to use multiple Create\u00ae 3 robots connected to the same Wi-Fi network, then you must follow the Multi-Robot Setup documentation ROS 2 is governed by Open Robotics \u21a9","title":"Connect to Wi-Fi"},{"location":"setup/provision/#connect-create-3-to-wi-fi","text":"","title":"Connect Create\u00ae 3 to Wi-Fi"},{"location":"setup/provision/#the-basics","text":"Follow the main guide for getting started here .","title":"The Basics"},{"location":"setup/provision/#select-rmw-implementation","text":"If you are planning to use ROS 2 1 , make sure you have selected the matching RMW implementation as the rest of the nodes in your system. This can be found in the Application \u2192 Configuration menu in the Create\u00ae 3 robot's web server, shown in the below image. The default RMW for ROS 2 Galactic is Cyclone DDS. Be sure to click \"save\" after making any changes, and then restart the application. Attention As of Create 3 software version G.2.2, there is a memory leak in Cyclone DDS that can cause the robot to reboot after a few hours of use. Please monitor this issue for further information. Fast-DDS does not have this problem. See ROS 2 Network Config for more information about RMW specific choices and configuration requirements. A detailed rundown of the features of the robot webserver can be found on the Application page.","title":"Select RMW Implementation"},{"location":"setup/provision/#using-multiple-robots","text":"Important If you plan to use multiple Create\u00ae 3 robots connected to the same Wi-Fi network, then you must follow the Multi-Robot Setup documentation ROS 2 is governed by Open Robotics \u21a9","title":"Using Multiple Robots"},{"location":"setup/ubuntu2004/","text":"Install ROS 2 Galactic with Create 3 Messages on an Ubuntu 20.04 Machine Before you start If you are running Ubuntu 1 20.04 natively on your machine, there is no extra setup required. These directions should work in a virtualized container within another operating system, as well. Note that there might be some network setup required if in a virtualized container; for example, RMWs seem to like running in a bridged network configuration rather than a NATted one. These directions follow Open Robotics' official documentation on Installing ROS 2 on Ubuntu Linux , and more detailed information about what the commands below do can be found there. Step-by-step If you haven't already, download and install Ubuntu\u00ae Server 20.04 64-bit onto your machine. Once logged in, check to ensure that you are using a UTF-8 locale by typing echo $LANG and ensuring \"UTF-8\" is at the end of the returned string. Execute the following blocks of commands to install ROS 2 2 : sudo apt update && sudo apt install -y curl gnupg2 lsb-release build-essential git cmake then sudo curl -ksSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null sudo apt update && sudo apt install -y ros-galactic-ros-base python3-colcon-common-extensions python3-rosdep ros-galactic-rmw-fastrtps-cpp ros-galactic-rmw-cyclonedds-cpp ros-galactic-irobot-create-msgs finally echo \"source /usr/share/colcon_cd/function/colcon_cd.sh\" >> ~/.bashrc echo \"export _colcon_cd_root=/opt/ros/galactic/\" >> ~/.bashrc echo \"source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash\" >> ~/.bashrc echo \"source /opt/ros/galactic/setup.bash\" >> ~/.bashrc At this point, we recommend setting your default RMW. The RMW you set here has to match the RMW on your robot, which can be found from its Application Configuration page. More detail on RMW can be found here . Right now, the Create\u00ae 3 robot supports rmw_cyclonedds_cpp and rmw_fastrtps_cpp . The default for Galactic is rmw_cyclonedds_cpp . Depending on your robot's RMW implementation, type one of the following: echo \"export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\" >> ~/.bashrc or echo \"export RMW_IMPLEMENTATION=rmw_fastrtps_cpp\" >> ~/.bashrc Finally, either log out and log back in, or simply source ~/.bashrc If both your computer and robot are on the same network, you should now be able to test things out with a ros2 topic list . If this does not work, please refer to ROS 2 Network Configuration for further configuration ideas. A full Create\u00ae 3 API description can be found here . Ubuntu is a registered trademark of Canonical Ltd. \u21a9 ROS 2 is governed by Open Robotics \u21a9","title":"ROS 2 on Ubuntu 20.04"},{"location":"setup/ubuntu2004/#install-ros-2-galactic-with-create-3-messages-on-an-ubuntu-2004-machine","text":"","title":"Install ROS 2 Galactic with Create 3 Messages on an Ubuntu 20.04 Machine"},{"location":"setup/ubuntu2004/#before-you-start","text":"If you are running Ubuntu 1 20.04 natively on your machine, there is no extra setup required. These directions should work in a virtualized container within another operating system, as well. Note that there might be some network setup required if in a virtualized container; for example, RMWs seem to like running in a bridged network configuration rather than a NATted one. These directions follow Open Robotics' official documentation on Installing ROS 2 on Ubuntu Linux , and more detailed information about what the commands below do can be found there.","title":"Before you start"},{"location":"setup/ubuntu2004/#step-by-step","text":"If you haven't already, download and install Ubuntu\u00ae Server 20.04 64-bit onto your machine. Once logged in, check to ensure that you are using a UTF-8 locale by typing echo $LANG and ensuring \"UTF-8\" is at the end of the returned string. Execute the following blocks of commands to install ROS 2 2 : sudo apt update && sudo apt install -y curl gnupg2 lsb-release build-essential git cmake then sudo curl -ksSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null sudo apt update && sudo apt install -y ros-galactic-ros-base python3-colcon-common-extensions python3-rosdep ros-galactic-rmw-fastrtps-cpp ros-galactic-rmw-cyclonedds-cpp ros-galactic-irobot-create-msgs finally echo \"source /usr/share/colcon_cd/function/colcon_cd.sh\" >> ~/.bashrc echo \"export _colcon_cd_root=/opt/ros/galactic/\" >> ~/.bashrc echo \"source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash\" >> ~/.bashrc echo \"source /opt/ros/galactic/setup.bash\" >> ~/.bashrc At this point, we recommend setting your default RMW. The RMW you set here has to match the RMW on your robot, which can be found from its Application Configuration page. More detail on RMW can be found here . Right now, the Create\u00ae 3 robot supports rmw_cyclonedds_cpp and rmw_fastrtps_cpp . The default for Galactic is rmw_cyclonedds_cpp . Depending on your robot's RMW implementation, type one of the following: echo \"export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\" >> ~/.bashrc or echo \"export RMW_IMPLEMENTATION=rmw_fastrtps_cpp\" >> ~/.bashrc Finally, either log out and log back in, or simply source ~/.bashrc If both your computer and robot are on the same network, you should now be able to test things out with a ros2 topic list . If this does not work, please refer to ROS 2 Network Configuration for further configuration ideas. A full Create\u00ae 3 API description can be found here . Ubuntu is a registered trademark of Canonical Ltd. \u21a9 ROS 2 is governed by Open Robotics \u21a9","title":"Step-by-step"},{"location":"setup/xml-config/","text":"ROS 2 Network Configuration The ROS 2 1 DDS middleware allows advanced network configurations. This page contains some examples that may be useful when interacting with the iRobot\u00ae Create\u00ae 3. Important Depending on the ROS 2 RMW used, the syntax for configuring the network will be different. We recommend to visit the RMW vendor documentation for more details. You can choose a RMW implementation on your machine using export RMW_IMPLEMENTATION=name-of-the-rmw On the robot the same can be controlled through the Create\u00ae 3 webserver. Important Always make sure that all the ROS 2 processes you are using have selected the same RMW implementation. Fast-DDS Fast-DDS allows to specify DDS configuration through an XML file. In order to apply a configuration, the path to the XML file must be provided through the following environment variable: export FASTRTPS_DEFAULT_PROFILES_FILE=/path/to/the/xml/profile Detailed network configurations are described in the Fast-DDS documentation . Multiple Network Interfaces Fast-DDS supports multiple network interfaces out of the box. A ROS 2 process will automatically use all the interfaces that were available when it started (it will not use network interfaces activated while the process was already running). Disable Multicast Some networks (e.g., academic or corporate Wi-Fi) may block the multicast packets used by ROS 2 by default. The following XML profile can be used on your laptop (or compute board) to force using unicast and directly connect to the IP address of your robot. The file must be edited replacing ROBOT_IP with the actual IP value. <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <profiles xmlns=\"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\"> <participant profile_name=\"unicast_connection\" is_default_profile=\"true\"> <rtps> <builtin> <metatrafficUnicastLocatorList> <locator/> </metatrafficUnicastLocatorList> <initialPeersList> <locator> <udpv4> <address>ROBOT_IP</address> </udpv4> </locator> </initialPeersList> </builtin> </rtps> </participant> </profiles> CycloneDDS CycloneDDS allows to specify DDS configuration through an XML file. In order to apply a configuration, the path to the XML file must be provided through the following environment variable: export CYCLONEDDS_URI=/path/to/the/xml/profile Detailed network configurations are described in the CycloneDDS documentation . Multiple Network Interfaces This feature requires CycloneDDS version 0.8.0 or higher. Use the following XML profile specifying the name of all the network interfaces you want to use. For example usb0 and wlan0 in this example. <CycloneDDS> <Domain> <General> <NetworkInterfaceAddress>usb0,wlan0</NetworkInterfaceAddress> </General> </Domain> </CycloneDDS> Note that the specified network interfaces must be already active when the ROS 2 process is started. Attention If the robot is running with a Compute Board like a Raspberry Pi\u00ae or an NVIDIA\u00ae Jetson\u2122 connected via USB, then the robot is using a multiple interface CycloneDDS config file to communicate both over usb0 and wlan0. We have found that with CycloneDDS version 0.8.1, for an Ubuntu laptop to see the robot topics with CycloneDDS when running multiple interfaces, the laptop must use the configuration option: <CycloneDDS> <Domain> <General> <DontRoute>true</DontRoute> </General> </Domain> </CycloneDDS> Disable Multicast Some networks (e.g. corporate WiFi) may block the multicast packets used by ROS 2 by default. The following XML profile can be used on your laptop (or compute board) to force using unicast and directly connect to the IP address of your robot. The file must be edited replacing ${ROBOT_IP} with the actual IP value, or exporting the value as an environment variable. <CycloneDDS> <Domain> <Id>any</Id> <General> <NetworkInterfaceAddress>auto</NetworkInterfaceAddress> <AllowMulticast>false</AllowMulticast> <EnableMulticastLoopback>true</EnableMulticastLoopback> </General> <Discovery> <ParticipantIndex>0</ParticipantIndex> <Peers> <Peer Address=\"${ROBOT_IP}:7410\"/> </Peers> </Discovery> </Domain> </CycloneDDS> ROS 2 is governed by Open Robotics \u21a9","title":"ROS 2 Network Config"},{"location":"setup/xml-config/#ros-2-network-configuration","text":"The ROS 2 1 DDS middleware allows advanced network configurations. This page contains some examples that may be useful when interacting with the iRobot\u00ae Create\u00ae 3. Important Depending on the ROS 2 RMW used, the syntax for configuring the network will be different. We recommend to visit the RMW vendor documentation for more details. You can choose a RMW implementation on your machine using export RMW_IMPLEMENTATION=name-of-the-rmw On the robot the same can be controlled through the Create\u00ae 3 webserver. Important Always make sure that all the ROS 2 processes you are using have selected the same RMW implementation.","title":"ROS 2 Network Configuration"},{"location":"setup/xml-config/#fast-dds","text":"Fast-DDS allows to specify DDS configuration through an XML file. In order to apply a configuration, the path to the XML file must be provided through the following environment variable: export FASTRTPS_DEFAULT_PROFILES_FILE=/path/to/the/xml/profile Detailed network configurations are described in the Fast-DDS documentation .","title":"Fast-DDS"},{"location":"setup/xml-config/#multiple-network-interfaces","text":"Fast-DDS supports multiple network interfaces out of the box. A ROS 2 process will automatically use all the interfaces that were available when it started (it will not use network interfaces activated while the process was already running).","title":"Multiple Network Interfaces"},{"location":"setup/xml-config/#disable-multicast","text":"Some networks (e.g., academic or corporate Wi-Fi) may block the multicast packets used by ROS 2 by default. The following XML profile can be used on your laptop (or compute board) to force using unicast and directly connect to the IP address of your robot. The file must be edited replacing ROBOT_IP with the actual IP value. <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <profiles xmlns=\"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\"> <participant profile_name=\"unicast_connection\" is_default_profile=\"true\"> <rtps> <builtin> <metatrafficUnicastLocatorList> <locator/> </metatrafficUnicastLocatorList> <initialPeersList> <locator> <udpv4> <address>ROBOT_IP</address> </udpv4> </locator> </initialPeersList> </builtin> </rtps> </participant> </profiles>","title":"Disable Multicast"},{"location":"setup/xml-config/#cyclonedds","text":"CycloneDDS allows to specify DDS configuration through an XML file. In order to apply a configuration, the path to the XML file must be provided through the following environment variable: export CYCLONEDDS_URI=/path/to/the/xml/profile Detailed network configurations are described in the CycloneDDS documentation .","title":"CycloneDDS"},{"location":"setup/xml-config/#multiple-network-interfaces_1","text":"This feature requires CycloneDDS version 0.8.0 or higher. Use the following XML profile specifying the name of all the network interfaces you want to use. For example usb0 and wlan0 in this example. <CycloneDDS> <Domain> <General> <NetworkInterfaceAddress>usb0,wlan0</NetworkInterfaceAddress> </General> </Domain> </CycloneDDS> Note that the specified network interfaces must be already active when the ROS 2 process is started. Attention If the robot is running with a Compute Board like a Raspberry Pi\u00ae or an NVIDIA\u00ae Jetson\u2122 connected via USB, then the robot is using a multiple interface CycloneDDS config file to communicate both over usb0 and wlan0. We have found that with CycloneDDS version 0.8.1, for an Ubuntu laptop to see the robot topics with CycloneDDS when running multiple interfaces, the laptop must use the configuration option: <CycloneDDS> <Domain> <General> <DontRoute>true</DontRoute> </General> </Domain> </CycloneDDS>","title":"Multiple Network Interfaces"},{"location":"setup/xml-config/#disable-multicast_1","text":"Some networks (e.g. corporate WiFi) may block the multicast packets used by ROS 2 by default. The following XML profile can be used on your laptop (or compute board) to force using unicast and directly connect to the IP address of your robot. The file must be edited replacing ${ROBOT_IP} with the actual IP value, or exporting the value as an environment variable. <CycloneDDS> <Domain> <Id>any</Id> <General> <NetworkInterfaceAddress>auto</NetworkInterfaceAddress> <AllowMulticast>false</AllowMulticast> <EnableMulticastLoopback>true</EnableMulticastLoopback> </General> <Discovery> <ParticipantIndex>0</ParticipantIndex> <Peers> <Peer Address=\"${ROBOT_IP}:7410\"/> </Peers> </Discovery> </Domain> </CycloneDDS> ROS 2 is governed by Open Robotics \u21a9","title":"Disable Multicast"},{"location":"sim/setup/","text":"Using the iRobot\u00ae Create\u00ae 3 Simulator We provide a ROS 2 Gazebo simulation stack for the iRobot\u00ae Create\u00ae 3 Educational Robot. Have a look at its Github repository . The Github repository contains instructions for how to building and running the simulator on your laptop. This application completely simulates a Create\u00ae 3 robot, thus exposing to the user all the same ROS 2 APIs as the real robot. You will be able to use the iRobot\u00ae Create\u00ae 3 Simulator to quickly develop your new applications and eventually run them on the real robot without having to change anything.","title":"Using the Simulator"},{"location":"sim/setup/#using-the-irobot-create-3-simulator","text":"We provide a ROS 2 Gazebo simulation stack for the iRobot\u00ae Create\u00ae 3 Educational Robot. Have a look at its Github repository . The Github repository contains instructions for how to building and running the simulator on your laptop. This application completely simulates a Create\u00ae 3 robot, thus exposing to the user all the same ROS 2 APIs as the real robot. You will be able to use the iRobot\u00ae Create\u00ae 3 Simulator to quickly develop your new applications and eventually run them on the real robot without having to change anything.","title":"Using the iRobot\u00ae Create\u00ae 3 Simulator"},{"location":"webserver/about/","text":"iRobot\u00ae Create\u00ae 3 Webserver - About The about page includes details about the state at the operating system level. IP Address This is the dotted octet IP address currently used to access this page. Version This is the raw version string of the firmware currently loaded on the robot. SKU This is the SKU that iRobot uses to identify the Create\u00ae 3 robot. Battery This includes both the percentage charge of the robot's smart battery, as well as the current capacity in milliamp-hours. Properties This section includes iRobot-specific diagnostic information about this robot. Date The current date and time on the robot. Uptime The amount of time since this robot's last reboot. Memory Total RAM and swap space available on the robot. ifconfig Output of the ifconfig command, including information for all available Ethernet interfaces. These may include lo , usb0 , wlan0 , and/or wlan1 depending on the state of the robot. Note that wlan0 and wlan1 are the same physical device, except that wlan0 is used when the robot is a station, and wlan1 is used when it is an access point. hciconfig Output of the hciconfig command, including information for all available Bluetooth\u00ae 1 interfaces. This will be blank when the USB/BLE toggle on the adapter board is set to USB. Factory Reset A hyperlink to factory reset the robot will appear when the robot is in access point mode. This will remove all user configuration, but the firmware version will not change. The Bluetooth\u00ae word mark and logos are registered trademarks owned by Bluetooth SIG, Inc. and any use of such marks by iRobot is under license. \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"About"},{"location":"webserver/about/#irobot-create-3-webserver-about","text":"The about page includes details about the state at the operating system level.","title":"iRobot\u00ae Create\u00ae 3 Webserver - About"},{"location":"webserver/about/#ip-address","text":"This is the dotted octet IP address currently used to access this page.","title":"IP Address"},{"location":"webserver/about/#version","text":"This is the raw version string of the firmware currently loaded on the robot.","title":"Version"},{"location":"webserver/about/#sku","text":"This is the SKU that iRobot uses to identify the Create\u00ae 3 robot.","title":"SKU"},{"location":"webserver/about/#battery","text":"This includes both the percentage charge of the robot's smart battery, as well as the current capacity in milliamp-hours.","title":"Battery"},{"location":"webserver/about/#properties","text":"This section includes iRobot-specific diagnostic information about this robot.","title":"Properties"},{"location":"webserver/about/#date","text":"The current date and time on the robot.","title":"Date"},{"location":"webserver/about/#uptime","text":"The amount of time since this robot's last reboot.","title":"Uptime"},{"location":"webserver/about/#memory","text":"Total RAM and swap space available on the robot.","title":"Memory"},{"location":"webserver/about/#ifconfig","text":"Output of the ifconfig command, including information for all available Ethernet interfaces. These may include lo , usb0 , wlan0 , and/or wlan1 depending on the state of the robot. Note that wlan0 and wlan1 are the same physical device, except that wlan0 is used when the robot is a station, and wlan1 is used when it is an access point.","title":"ifconfig"},{"location":"webserver/about/#hciconfig","text":"Output of the hciconfig command, including information for all available Bluetooth\u00ae 1 interfaces. This will be blank when the USB/BLE toggle on the adapter board is set to USB.","title":"hciconfig"},{"location":"webserver/about/#factory-reset","text":"A hyperlink to factory reset the robot will appear when the robot is in access point mode. This will remove all user configuration, but the firmware version will not change. The Bluetooth\u00ae word mark and logos are registered trademarks owned by Bluetooth SIG, Inc. and any use of such marks by iRobot is under license. \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"Factory Reset"},{"location":"webserver/application/","text":"iRobot\u00ae Create\u00ae 3 Webserver - Application The Application menu normally has two options: \"Configuration\" and \"Restart Application.\" When the robot is acting as an access point, a third option, \"Reboot robot,\" appears. Restart Application Clicking \"Restart Application\" will restart the robot's ROS 2 1 application. This will take a few seconds to complete. Restarting the application is necessary after modifying ROS 2 configuration settings. Restarting the application will not restart the webserver; they are separate applications. Reboot Robot Clicking \"Reboot Robot\" will completely reboot the robot. This will take multiple minutes to complete. Application Configuration There are two configuration sections on this page. After saving either section, it is required to restart the application for changes to take effect. Main Configuration The main configuration includes ROS 2 domain ID, namespace, and RMW Implementation. Basic information about these settings can be found on this docs site both in the ROS 2 Network Configuration and Multi-Robot Setup pages. Further details on these settings can be found in the official ROS 2 documentation. Application ROS 2 Parameters File This is a raw yaml file used for configuring ROS 2 parameters. The web server will not validate this yaml file; setting it incorrectly may cause the application to fail to start properly. Details of this will be found in the logs . If this happens, the parameters file can again be edited and saved in the web server in order to correct the problem. An official ROS 2 tutorial on parameters can be found here . ROS 2 is governed by Open Robotics \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"Application"},{"location":"webserver/application/#irobot-create-3-webserver-application","text":"The Application menu normally has two options: \"Configuration\" and \"Restart Application.\" When the robot is acting as an access point, a third option, \"Reboot robot,\" appears.","title":"iRobot\u00ae Create\u00ae 3 Webserver - Application"},{"location":"webserver/application/#restart-application","text":"Clicking \"Restart Application\" will restart the robot's ROS 2 1 application. This will take a few seconds to complete. Restarting the application is necessary after modifying ROS 2 configuration settings. Restarting the application will not restart the webserver; they are separate applications.","title":"Restart Application"},{"location":"webserver/application/#reboot-robot","text":"Clicking \"Reboot Robot\" will completely reboot the robot. This will take multiple minutes to complete.","title":"Reboot Robot"},{"location":"webserver/application/#application-configuration","text":"There are two configuration sections on this page. After saving either section, it is required to restart the application for changes to take effect.","title":"Application Configuration"},{"location":"webserver/application/#main-configuration","text":"The main configuration includes ROS 2 domain ID, namespace, and RMW Implementation. Basic information about these settings can be found on this docs site both in the ROS 2 Network Configuration and Multi-Robot Setup pages. Further details on these settings can be found in the official ROS 2 documentation.","title":"Main Configuration"},{"location":"webserver/application/#application-ros-2-parameters-file","text":"This is a raw yaml file used for configuring ROS 2 parameters. The web server will not validate this yaml file; setting it incorrectly may cause the application to fail to start properly. Details of this will be found in the logs . If this happens, the parameters file can again be edited and saved in the web server in order to correct the problem. An official ROS 2 tutorial on parameters can be found here . ROS 2 is governed by Open Robotics \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"Application ROS 2 Parameters File"},{"location":"webserver/connect/","text":"iRobot\u00ae Create\u00ae 3 Webserver - Connect The connect page of the Create\u00ae 3 webserver allows the robot's name to be changed, and also is used to provision the robot to a 2.4 GHz Wi-Fi network. The top of the connect page gives the robot's current IPv4 address. The \"Update Robot Names\" box allows the user to change the robot's hostname (which can also be used to find the robot using mDNS) and its Bluetooth name (which can be used to find it in iRobot Coding.) The \"Connect to a 2.4 GHz Wi-Fi Network\" box allows the user to connect to any network the robot can perceive. Clicking on the box to the right of \"Type your Wi-Fi network name\" should yield a drop-down of all available networks. It may be necessary to change the drop-down for additional radio bands, depending on the region in which the robot is used. If you are using the robot in Japan (JP), please select \"Japan;\" if you are using the robot in any of (AS, CA, FM, GU, KY, MP, PR, TW, UM, US, or VI), please select \"North America.\" All trademarks mentioned are the property of their respective owners. \u21a9","title":"Connect"},{"location":"webserver/connect/#irobot-create-3-webserver-connect","text":"The connect page of the Create\u00ae 3 webserver allows the robot's name to be changed, and also is used to provision the robot to a 2.4 GHz Wi-Fi network. The top of the connect page gives the robot's current IPv4 address. The \"Update Robot Names\" box allows the user to change the robot's hostname (which can also be used to find the robot using mDNS) and its Bluetooth name (which can be used to find it in iRobot Coding.) The \"Connect to a 2.4 GHz Wi-Fi Network\" box allows the user to connect to any network the robot can perceive. Clicking on the box to the right of \"Type your Wi-Fi network name\" should yield a drop-down of all available networks. It may be necessary to change the drop-down for additional radio bands, depending on the region in which the robot is used. If you are using the robot in Japan (JP), please select \"Japan;\" if you are using the robot in any of (AS, CA, FM, GU, KY, MP, PR, TW, UM, US, or VI), please select \"North America.\" All trademarks mentioned are the property of their respective owners. \u21a9","title":"iRobot\u00ae Create\u00ae 3 Webserver - Connect"},{"location":"webserver/home/","text":"iRobot\u00ae Create\u00ae 3 Webserver - Home The home page of the Create\u00ae 3 webserver includes the version number of the robot. When the robot is in access point mode, an \"Identify Robot\" button appears between the banner and version number. Pressing this button will cause the robot to emit a chime. This may be helpful in order to find a particular robot while provisioning multiple robots at once. All trademarks mentioned are the property of their respective owners. \u21a9","title":"Home"},{"location":"webserver/home/#irobot-create-3-webserver-home","text":"The home page of the Create\u00ae 3 webserver includes the version number of the robot. When the robot is in access point mode, an \"Identify Robot\" button appears between the banner and version number. Pressing this button will cause the robot to emit a chime. This may be helpful in order to find a particular robot while provisioning multiple robots at once. All trademarks mentioned are the property of their respective owners. \u21a9","title":"iRobot\u00ae Create\u00ae 3 Webserver - Home"},{"location":"webserver/logs/","text":"iRobot\u00ae Create\u00ae 3 Webserver - Logs The logs page of the Create\u00ae 3 webserver provides an interface for accessing the robot's system log. Note that the logs are lost when the robot loses power. Clicking \"Download Logs\" will pull a raw text file including the logs show on this page; this can also be accessed at /logs-raw on the webserver. All trademarks mentioned are the property of their respective owners. \u21a9","title":"Logs"},{"location":"webserver/logs/#irobot-create-3-webserver-logs","text":"The logs page of the Create\u00ae 3 webserver provides an interface for accessing the robot's system log. Note that the logs are lost when the robot loses power. Clicking \"Download Logs\" will pull a raw text file including the logs show on this page; this can also be accessed at /logs-raw on the webserver. All trademarks mentioned are the property of their respective owners. \u21a9","title":"iRobot\u00ae Create\u00ae 3 Webserver - Logs"},{"location":"webserver/overview/","text":"iRobot\u00ae Create\u00ae 3 Webserver Overview Tip If this is your first time using the robot's web server, it's important to run through initial setup . The Create\u00ae 3 robot runs a configuration webserver for modifying settings of the robot. This is a separate process from its ROS 2 1 application; it is running regardless of the status of that application. The webserver can be accessed via the robot's usb0 (Ethernet over USB host), wlan0 (provisioned to an external access point), or wlan1 (robot as its own access point) interfaces. The robot has a fixed IP address of 192.168.186.2 over its usb0 interface, and a fixed IP address of 192.168.10.1 over its wlan1 interface. The robot will get an IP address over DHCP as served by your network on its wlan0 interface. The webserver is available over http (port 80) in a browser by navigating to its IP address on whichever interface is active. Attention It is not recommended to run the robot's access point while also controlling the robot via ROS 2 or iRobot Coding. Please use the menu to navigate between sections of the webserver, or else navigate directly to the sections below: Home Connect Update Logs Application About ROS 2 is governed by Open Robotics \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"Overview"},{"location":"webserver/overview/#irobot-create-3-webserver-overview","text":"Tip If this is your first time using the robot's web server, it's important to run through initial setup . The Create\u00ae 3 robot runs a configuration webserver for modifying settings of the robot. This is a separate process from its ROS 2 1 application; it is running regardless of the status of that application. The webserver can be accessed via the robot's usb0 (Ethernet over USB host), wlan0 (provisioned to an external access point), or wlan1 (robot as its own access point) interfaces. The robot has a fixed IP address of 192.168.186.2 over its usb0 interface, and a fixed IP address of 192.168.10.1 over its wlan1 interface. The robot will get an IP address over DHCP as served by your network on its wlan0 interface. The webserver is available over http (port 80) in a browser by navigating to its IP address on whichever interface is active. Attention It is not recommended to run the robot's access point while also controlling the robot via ROS 2 or iRobot Coding. Please use the menu to navigate between sections of the webserver, or else navigate directly to the sections below: Home Connect Update Logs Application About ROS 2 is governed by Open Robotics \u21a9 All other trademarks mentioned are the property of their respective owners. \u21a9","title":"iRobot\u00ae Create\u00ae 3 Webserver Overview"},{"location":"webserver/update/","text":"iRobot\u00ae Create\u00ae 3 Webserver - Update The update page of the Create\u00ae 3 webserver provides an interface for updating the robot's firmware. The top of the connect page gives the robot's current firmware version. When the robot is on the Internet, a button will appear at the top of the page which should cause the robot to download the most recent update from iRobot's web site and then flash it to the robot. If a particular firmware version is needed, there is a hyperlink which will expand the menu in order to allow the user to upload firmware of their choosing. Clicking the \"choose file\" button will allow the user to select a local firmware file; once selected, click \"upload file and update\" to begin the process. This video outlines the steps in detail: All trademarks mentioned are the property of their respective owners. \u21a9","title":"Update"},{"location":"webserver/update/#irobot-create-3-webserver-update","text":"The update page of the Create\u00ae 3 webserver provides an interface for updating the robot's firmware. The top of the connect page gives the robot's current firmware version. When the robot is on the Internet, a button will appear at the top of the page which should cause the robot to download the most recent update from iRobot's web site and then flash it to the robot. If a particular firmware version is needed, there is a hyperlink which will expand the menu in order to allow the user to upload firmware of their choosing. Clicking the \"choose file\" button will allow the user to select a local firmware file; once selected, click \"upload file and update\" to begin the process. This video outlines the steps in detail:","title":"iRobot\u00ae Create\u00ae 3 Webserver - Update"}]}